#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::import cli core variable declare
cli::import cli core variable put
cli::import cli core variable write

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}

    Given a stream of command line productions produce a stream of
    the following form:

        struct meta {
            map default
            array require
            map_of map allow
            map alias
            map implicit_value
            boolean positional
        }

    'required' is an array of required options

    'default' is an associative array of default values which are
    assigned when the option is not present on the command line. All known
    options must have a default.

    'implicit_value' is an associatie array of implicit values which
    are assigned when the option is present on the command line but no value
    is supplied or the value is the empty string.

    'alias' is an assoicative array of aliases, typically a single 
    letter. 

    'allow' is an associative array of space delimited allowed 
    values for a given option. 

    'positional' is a boolean and specifies if positional arguments 
    are accepted.
EOF
}

cli::meta::declare() {
    :
}

cli::dsl::meta::main() { 
    local -A SCOPE=()
    local ARG_SCOPE="SCOPE"

    ARG_TYPE="cli_meta_tables" \
        ::cli::core::variable::declare::inline "STRUCT"

    local NAME="STRUCT"

    local group
    local name
    local production

    # productions are sorted by group + key
    while read group key production_name identifier; do
        production="CLI_DSL_PRODUCTION_${production_name}"
        production=${!production}

        # argument group
        if (( production == CLI_DSL_PRODUCTION_ARGUMENTS )); then
            name=
            group="${identifier}"

        # arguments
        elif (( production == CLI_DSL_PRODUCTION_NAME )); then
            name="${identifier}"
            # ::cli::core::variable::put::inline named "${group}" "${name}"
            # cli::put STRUCT named "${group}" "${name}"

        # anyargs
        elif (( production == CLI_DSL_PRODUCTION_ANYARGS )); then
            ::cli::core::variable::put::inline "${NAME}" positional "${group}" true

        # alias
        elif (( production == CLI_DSL_PRODUCTION_ALIAS )); then
            ::cli::core::variable::put::inline "${NAME}" alias "${identifier}" "${name}"

        # default
        elif (( production == CLI_DSL_PRODUCTION_DEFAULT )); then
            ::cli::core::variable::put::inline "${NAME}" default "${group}" "${name}" "${identifier}"

        # regex
        elif (( production == CLI_DSL_PRODUCTION_REGEX )); then
            ::cli::core::variable::put::inline "${NAME}" regex "${group}" "${name}" "${identifier}"

        # type
        elif (( production == CLI_DSL_PRODUCTION_TYPE )); then
            ::cli::core::variable::put::inline "${NAME}" type "${group}" "${name}" "${identifier}"

        # require
        elif (( production == CLI_DSL_PRODUCTION_REQUIRED )); then
            ::cli::core::variable::put::inline "${NAME}" require "${group}" "${name}"

        # flag
        # elif (( production == CLI_DSL_PRODUCTION_FLAG )); then
        #     cli::put STRUCT default "${group}" "${name}" false
        #     cli::put STRUCT implicit_value "${group}" "${name}" true
        #     cli::put STRUCT allow "${group}" "${name}" true
        #     cli::put STRUCT allow "${group}" "${name}" false

        # allow
        elif (( production == CLI_DSL_PRODUCTION_ALLOWED_VALUE )); then
            ::cli::core::variable::put::inline "${NAME}" allow "${group}" "${name}" "${identifier}"

        # else
        #     cli::assert "Unknown production ${production_name}."
        fi

    done

    ::cli::core::variable::write::inline "${NAME}"
}

self_test() {
            
    diff <(cli dsl sample -h \
            | cli dsl tokenize \
            | cli dsl parse \
            | cli dsl meta \
        ) \
        <(cat <<-EOF
			require * header
			default * fruit banana
			regex * header ^[A-Z][A-Za-z0-9_]*$
			positional *
			alias p my-props
			alias l my-list
			alias i id
			alias h help
			alias f fruit
			alias d dump
			type id id string
			type * my-list array
			type * run-as string
			type * fruit string
			type * my-props map
			type * self-test boolean
			type * help boolean
			type * header string
			type * dump boolean
			type name name string
			type name namespace string
			allow * fruit orange
			allow * fruit banana
			EOF
        )
}
