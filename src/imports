#!/usr/bin/env bash
source $(cli loader)
cli::import_group

help() {
    cat << EOF | cli::help::global
Command
    ${CLI_COMMAND}
    
Summary
    Find transitive imports for a list of imports.

Arguments
    --cli -c                : CLI path to a command or group.
    --tree -t        [Flag] : Indent output.
    --unique -u      [Flag] : Print only unique imports.
    --resolve -r     [Flag] : Print the file to which the import 
                              resolves after printing the import.
    --                      : List of imports.
EOF
    cat << EOF

Examples
    Emit the unique sorted imports of 'cli dsl'
        cli imports -c "cli dsl"
EOF
}

import() {
    cli::meta::add_optional 'cli'
    cli::meta::add_flag 'tree'
    cli::meta::add_flag 'unique'
    cli::meta::add_flag 'resolve'
    cli::meta::allow_positional
}

cli::imports::recurse() {

    while (( $# > 0 )); do
        local import=$1
        shift

        if ${arg_unique} && ${seen[$import]-false}; then
            continue
        fi

        echo "${prefix}${import}"
        seen["${import}"]=true

        if ${arg_resolve}; then
            echo "${prefix}$(${import} ---which)"
        fi

        ( 
            local -a CLI_LOADER_IMPORTS=()
            source $(${import} '---exports')

            if (( ${#CLI_LOADER_IMPORTS[*]} > 0 )); then
                printf '%s\n' "${CLI_LOADER_IMPORTS[@]}"
            fi
        ) | mapfile -t

        prefix="${prefix}${indent}" cli::imports::recurse "${MAPFILE[@]}"
    done 
}

cli::imports::command() {
    $1 '---imports' | mapfile -t
    if ${arg_tree}; then
        echo $1
    fi
    prefix="${prefix}${indent}" cli::imports::recurse "${MAPFILE[@]}"
}

cli::imports::group() {
    cli find --cli "${arg_cli}" --type 'c' \
        | while read; do cli::imports::command "${REPLY}"; done
}

main() {
    local prefix=
    local indent=
    local -A seen=

    if ${arg_tree}; then
        indent='  '
    fi

    cli::imports::recurse "$@"

    if [[ -n "${arg_cli}" ]]; then
        case $(${arg_cli} '---type') in
            'command') cli::imports::command "${arg_cli}" ;;
            'group') cli::imports::group ;;
        esac
    fi
}

cli::main "$@"