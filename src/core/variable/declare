#!/usr/bin/env bash
source $(cli loader)
cli::import_group
cli::import_inline cli bash emit
cli::import_inline cli core variable initialize
cli::import_inline cli core type is-scaler
cli::import_inline cli core type is-builtin
cli::import_inline cli core type is-user-defined
cli::import cli_assert

help() {
cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Declare and initialize a bash variable or variables for a given type.

Description
    Declares and initializes a global bash variable or variables depending on 
    the provided type.

Arguments
    ${CLI_CORE_VARIABLE_ARG_NAME}
    ${CLI_CORE_VARIABLE_ARG_TYPE}

Debug Arguments
    --source -s      [Flag] : Source stdin to provide 'CLI_TYPE__*' metadata.

Global Arguments
    ${CLI_GLOBAL_ARG_HELP}
    ${CLI_GLOBAL_ARG_SELF_TEST}
EOF
}

::cli::core::variable::declare::inline() {
    inline
}

inline() {
    : ${arg_type:?}
    : ${arg_name:?}

    local -a type=( ${arg_type} )

    # builtin type
    if arg_type=${arg_type} ::cli::core::type::is_builtin::inline ||
        arg_type=${arg_type} ::cli::core::type::is_modified::inline; then

        # initialize declare flags
        local declare_flag=g
        case ${type} in
            'integer') declare_flag+=i ;;
            'array') declare_flag+=a ;;
            'map') declare_flag+=A ;;
            'map_of') declare_flag+=A ;;
        esac

        # declare the bash variable
        declare -${declare_flag} ${arg_name}

        # initialize the bash variable
        arg_type=${arg_type} \
        arg_name=${arg_name} \
            ::cli::core::variable::initialize::inline

    # user defined type
    else
        cli::assert arg_type=${arg_type} ::cli::core::type::is_user_defined::inline
  
        local -n type_ref=CLI_TYPE__${arg_type^^}

        # layout fields
        for field in ${!type_ref[@]}; do
            local field_type=${type_ref[$field]}

            # recursively declare fields
            arg_name=${arg_name}${CLI_NSS}${field^^} \
            arg_type=${field_type} \
                ::cli::core::variable::declare::inline 
        done
    fi
}

main() {
    if ${arg_source}; then
        source /dev/stdin
    fi

    arg_name=${arg_name} \
        inline ${arg_type}

    ::cli::bash::emit::inline "${arg_name}" "${arg_name}_*"
}

self_test() {
    # string
    ${CLI_COMMAND} --name VAR --type string \
        | assert::pipe_eq \
            'declare -- VAR=""'

    # integer
    ${CLI_COMMAND} --name VAR --type integer \
        | assert::pipe_eq \
            'declare -i VAR="0"'

    # boolean
    ${CLI_COMMAND} --name VAR --type boolean \
        | assert::pipe_eq \
            'declare -- VAR="false"'

    # array
    ${CLI_COMMAND} --name VAR --type array \
        | assert::pipe_eq \
            'declare -a VAR=()'

    # map
    ${CLI_COMMAND} --name VAR --type map \
        | assert::pipe_eq \
            'declare -A VAR=()'

    # user defined
    cli core struct define --name version \
        | cli core struct define-field --name major --type integer \
        | cli core struct define-field --name minor --type integer \
        | cli core struct define --source --name udt \
        | cli core struct define-field --name string_field --type string \
        | cli core struct define-field --name integer_field --type integer \
        | cli core struct define-field --name boolean_field --type boolean \
        | cli core struct define-field --name map_field --type map \
        | cli core struct define-field --name array_field --type array \
        | cli core struct define-field --name version_field --type version \
        | cli core struct define-field --name map_of_map_field --type 'map_of map' \
        | ${CLI_COMMAND} --source --name VAR --type udt \
        | assert::pipe_eq \
            'declare -a VAR__ARRAY_FIELD=()' \
            'declare -- VAR__BOOLEAN_FIELD="false"' \
            'declare -i VAR__INTEGER_FIELD="0"' \
            'declare -A VAR__MAP_FIELD=()' \
            'declare -A VAR__MAP_OF_MAP_FIELD=()' \
            'declare -- VAR__STRING_FIELD=""' \
            'declare -i VAR__VERSION_FIELD__MAJOR="0"' \
            'declare -i VAR__VERSION_FIELD__MINOR="0"'

    # map_of
    ${CLI_COMMAND} --name VAR --type 'map_of integer' \
        | assert::pipe_eq \
            'declare -A VAR=()'
}

cli::load "$@"
