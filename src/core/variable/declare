#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::import cli bash variable initialize
cli::import cli bash variable get-info
cli::import cli core type get
cli::import cli core type load
cli::import cli core type to-bash
cli::import cli core variable resolve

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    Declare and initialize a bash variable or variables for a given type.

Description
    Declares and initializes a global bash variable or variables depending on 
    the provided type.

    Redefinition of a variable as the same type is a no-op.
EOF
}

cli::core::variable::declare::main() {
    cli::import cli core variable parse

    : ${ARG_SCOPE?}

    ::cli::core::variable::parse::inline "$@"

    ARG_TYPE="${MAPFILE[@]}" \
    ARG_NAME="${REPLY}" \
        ::cli::core::variable::declare::inline
}

::cli::core::variable::declare::inline() {
    local SCOPE_NAME="${ARG_SCOPE?'Missing scope.'}"
    local TYPE=( ${ARG_TYPE?'Missing type.'} )
    local NAME="${ARG_NAME?'Missing name.'}"
    local -n SCOPE_REF="${SCOPE_NAME}"

    # redefinition is a noop
    if [[ "${SCOPE_REF["${NAME}"]+set}" ]]; then
        [[ "${SCOPE_REF["${NAME}"]}" == "${TYPE[*]}" ]] || \
            cli::assert "Variable '${NAME}' of type '${TYPE[*]}'" \
                "cannot be redclared type '${SCOPE_REF["${NAME}"]}'."
        return
    
    # disallow declaring variables already declared in bash
    else
        ! ::cli::bash::variable::get_info::inline "${NAME}" || \
            cli::assert "Failed to declare '${NAME}'." \
                "Variable '${NAME}' already declared:" \
                 $( declare -p "${NAME}" )
    fi

    # assoicate variable with its type
    SCOPE_REF["${NAME}"]="${TYPE[*]}"

    ::cli::core::type::get::inline "${TYPE[@]}"

    # base case
    if ! ${REPLY_CLI_CORE_TYPE_IS_USER_DEFINED}; then

        # convert core type to bash type (ie boolean -> string)
        ::cli::core::type::to_bash::inline ${TYPE[@]} || 
            cli::assert "Unknown type '${TYPE[@]}}'."

        # declare and initialize bash variable
        ::cli::bash::variable::initialize::inline "${REPLY}" "${NAME}"

        # accept bash initial values except for 'boolean'
        if ${REPLY_CLI_CORE_TYPE_IS_BOOLEAN}; then
            local -n REF="${NAME}"
            REF="false"
        fi

    # user defined
    else
        local USER_DEFINED_TYPE=${REPLY}
       
        # bgen optimization
        # local bgen=${CLI_BGEN_DECLARE[CLI_TYPE_${TYPE^^}]-}
        # if [[ -n ${bgen} ]]; then
        #     ${bgen} ${NAME}
        #     return
        # fi
        # echo "--- MISSING BGEN FOR CLI_TYPE_${TYPE^^} ---" > /dev/stderr

        ::cli::core::type::load::inline ${USER_DEFINED_TYPE}
        local -n TYPE_REF=${REPLY}

        # layout fields
        local FIELD
        for FIELD in "${!TYPE_REF[@]}"; do

            # resolve bash variable for field
            ARG_TYPE="${USER_DEFINED_TYPE}" \
            ARG_NAME="${NAME}" \
                ::cli::core::variable::resolve::inline "${FIELD}"

            # recursively initialize bash variable for field
            ARG_TYPE="${MAPFILE[*]}" \
            ARG_NAME="${REPLY}" \
                ::cli::core::variable::declare::inline
        done
    fi
}

self_test() {
    cli::import cli core variable parse
    cli::import cli bash variable get-info

    local -A SCOPE=()

    test() {
        ::cli::core::variable::parse::inline "$@"
        local TYPE="${MAPFILE[@]}" \
        local NAME="${REPLY}" \

        # declare the variable
        ARG_SCOPE=SCOPE \
        ARG_TYPE="${TYPE}" \
        ARG_NAME="${NAME}" \
            ::cli::core::variable::declare::inline

        test::verify() {
            local TYPE="$1"
            local NAME="$2"

            # the variable is registered in the scope
            [[ "${SCOPE["${NAME}"]+set}" && \
                "${SCOPE["${NAME}"]}" == "${TYPE}" ]] || \
                cli::assert "${SCOPE["${NAME}"]+missing} != ${TYPE}"

            ::cli::core::type::get::inline ${TYPE}

            if ! ${REPLY_CLI_CORE_TYPE_IS_USER_DEFINED}; then

                # get info about the underlying bash variable
                ::cli::bash::variable::get_info::inline "${NAME}"
                local ACUTAL_BASH_TYPE="${MAPFILE[*]}"

                # the bash variable should be initialized and mutable
                ! ${REPLY_CLI_BASH_VARIABLE_IS_UNINITIALIZED} || cli::assert
                ! ${REPLY_CLI_BASH_VARIABLE_IS_READONLY} || cli::assert

                # the bash variable type should correspond to the core type
                ::cli::core::type::to_bash::inline ${TYPE} 
                local EXPECTED_BASH_TYPE="${REPLY}"

                [[ "${ACUTAL_BASH_TYPE}" == "${EXPECTED_BASH_TYPE}" ]] || cli::assert

                return
            fi

            # no bash variable is declared for a UDT
            ! ::cli::bash::variable::get_info::inline "${NAME}" || cli::assert

            ::cli::core::type::load::inline "${TYPE}"
            local -n TYPE_REF="${REPLY}"

            local FIELD
            for FIELD in "${!TYPE_REF[@]}"; do
                
                ARG_NAME="${NAME}" \
                ARG_TYPE="${TYPE}" \
                    ::cli::core::variable::resolve::inline "${FIELD}"

                # recurse
                test::verify "${MAPFILE[*]}" "${REPLY}"
            done
        }

        # parse the declaration
        test::verify "${TYPE}" "${NAME}"
    }

    test string MY_STRING
    test integer MY_INTEGER
    test array MY_ARRAY
    test map MY_MAP

    test boolean MY_BOOLEAN
    test map_of string MY_MODIFIED

    declare -A CLI_TYPE_VERSION=(
        [major]='integer'
        [minor]='integer'
    )
    test version MY_VERSION

    # kitchen sink
    declare -A CLI_TYPE_UDT=(
        [my_string]='string'
        [my_integer]='integer'
        [my_boolean]='boolean'
        [my_map]='map'
        [my_array]='array'
        [my_map_of_string]='map_of string'
        [my_version]='version'
        [my_map_of_version]='map_of version'
    )
    test udt MY_UDT

    diff <(cli::dump 'MY_*' | sort -k3) - <<-EOF
		declare -a MY_ARRAY=()
		declare -- MY_BOOLEAN="false"
		declare -i MY_INTEGER="0"
		declare -A MY_MAP=()
		declare -A MY_MODIFIED=()
		declare -- MY_STRING=""
		declare -a MY_UDT_MY_ARRAY=()
		declare -- MY_UDT_MY_BOOLEAN="false"
		declare -i MY_UDT_MY_INTEGER="0"
		declare -A MY_UDT_MY_MAP=()
		declare -A MY_UDT_MY_MAP_OF_STRING=()
		declare -A MY_UDT_MY_MAP_OF_VERSION=()
		declare -- MY_UDT_MY_STRING=""
		declare -i MY_UDT_MY_VERSION_MAJOR="0"
		declare -i MY_UDT_MY_VERSION_MINOR="0"
		declare -i MY_VERSION_MAJOR="0"
		declare -i MY_VERSION_MINOR="0"
		EOF

    MY_STRING=foo
    test string MY_STRING
    [[ "${MY_STRING}" == 'foo' ]] || cli::assert "'${MY_STRING}'"
}
