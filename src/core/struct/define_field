#!/usr/bin/env bash
source $(cli loader)
cli::import_group
cli::import cli_assert
cli::import_inline cli bash emit

help() {
cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Define a field on a type.

Description
    Adds entries to a sourced map with a well known name representing a 
    type and then emits the updated map. Assumes the first line sourced 
    is a comment containing the type name. The map name is 'CLI_TYPE_'
    plus the upper case name of the type.

    Builtin types are

        map
        array
        string
        integer
        boolean

    Valid modifiers are

        map_of

    For example, define a type 'table' with fields 'allow' and 'required' 
    like this:

        cli core type define --name table  \
            | cli core type define-field --name require --type map \
            | cli core type define-field --name allow --type "map_of map"

    which will emit this:

        # table
        declare -A CLI_TYPE_TABLE=( [allow]='map_of map' [require]=map )

Arguments
    --name -n       [Require] : Name of the field. Regex: ${CLI_REGEX_STRUCT_FIELD_NAME}.
    --type -t       [Require] : Type of the field. Regex: ${CLI_REGEX_TYPE_NAME}.

Debug Arguments
    --source -s        [Flag] : Source stdin.

Global Arguments
    ${CLI_GLOBAL_ARG_HELP}
    ${CLI_GLOBAL_ARG_SELF_TEST}
EOF
}

inline() {
    : ${arg_struct?}
    : ${arg_name?}
    : ${arg_type?}

    # add the field to type
    local -nu ref=CLI_TYPE_${arg_struct}
    ref+=( [${arg_name}]="${arg_type}" )
}

main() {
    
    # read metadata (e.g # my_type)
    read pound type

    # source the type
    source /dev/stdin

    # update fields associated with type
    arg_struct=${type} \
    arg_name=${arg_name} \
    arg_type="${arg_type}" \
        inline 

    # echo metadata
    echo ${pound} ${type}

    # emit type with the new field
    ::cli::bash::emit::inline 'CLI_TYPE_*'
}

self_test() {
    cli core struct define --name version  \
        | ${CLI_COMMAND} --name major --type 'integer' \
        | ${CLI_COMMAND} --name minor --type 'integer' \
        | cli core struct define -s --name table \
        | ${CLI_COMMAND} --name allow --type 'map_of map' \
        | assert::pipe_eq \
            '# table' \
            'declare -A CLI_TYPE_TABLE=([allow]="map_of map" )' \
            'declare -A CLI_TYPE_VERSION=([minor]="integer" [major]="integer" )'
}

cli::main "$@"