#!/usr/bin/env bash
source $(cli loader)
cli::import_group
cli::import cli_assert
cli::import_inline cli bash emit

help() {
cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Define a type.

Description
    A type is declared by declaring a global variable as an associative array with
    a well known name and then initializing it with an empty map. That variable is
    emitted preceeded by a comment consisting of the type name. For example, to 
    declare a type 'table', a map 'CLI_TYPE_TABLE' will be declared and the following
    emitted:

        # table
        declare -A CLI_TYPE_TABLE=()

Arguments
    --name -n     [Require] : Name of the type. Regex: ${CLI_REGEX_STRUCT_NAME}.

Debug Arguments
    --source -s      [Flag] : Source stdin.

Global Arguments
    ${CLI_GLOBAL_ARG_HELP_FLAG}
    ${CLI_GLOBAL_ARG_SELF_TEST_FLAG}
EOF
}

cli::post_imports() {
    CLI_META_0_ALIAS+=([n]="name" )
    CLI_META_0_DEFAULT+=([name]="" )
    CLI_META_0_REGEX+=([name]="${CLI_REGEX_STRUCT_NAME}" )
}

inline() {
    : ${arg_name?}
    cli::check::regex "${arg_name}" "${CLI_REGEX_STRUCT_NAME}"

    # name
    local -u variable=CLI_TYPE_${arg_name}
    
    # declare
    declare -gA ${variable}
    
    # initialize
    local -n ref=${variable}
    ref=()
}

main() {
    if ${arg_source}; then
        source /dev/stdin
    fi

    inline

    # emit metadata
    echo "# ${arg_name}"

    # emit
    ::cli::bash::emit::inline 'CLI_TYPE_*'
}

self_test() {
    ${CLI_COMMAND} --name version \
        | ${CLI_COMMAND} -s --name table \
        | assert::pipe_eq \
            '# table' \
            'declare -A CLI_TYPE_TABLE=()' \
            'declare -A CLI_TYPE_VERSION=()'
}

cli::main "$@"