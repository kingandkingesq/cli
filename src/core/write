#!/usr/bin/env bash
source $(cli loader)
cli::import_group
cli::import_inline cli bash write
cli::import_inline cli core type is-scaler
cli::import_inline cli core type is-builtin
cli::import_inline cli core type is-modified
cli::import_inline cli core type is-user-defined
cli::import_inline cli core type unmodify
cli::import cli_assert

help() {
    cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Write a variable as a sequence of records.

Description
    To write a variable as a seqeunce of records, treat the variable as the 
    root of a tree. Whether a node has children is determined by its type:
    
    Scaler types have no children; Scaler types are leafs.
    
    Arrays have implicitly named children. An array's elements are its children and
    the names are their index which is implied by their position in the array and 
    are not included in the record.

    Maps have named children. An map's values are its children and the map's keys
    are the child names.
.     
    Anonymous structs (i.e. a type modified by 'map_of') have named children. An 
    annonymous struct is represented by a bash map. Its children are its values 
    and each child's name is its associated keys.

    Structs have named children. A structs children are the values of its fields and 
    the field names names are the child names

    Records are printed for each leaf visted during a depth first walk of a tree. For
    each leaf, the record consists of fields which are the names of all parents plus
    the scaler value.

Arguments
    ${CLI_CORE_ARG_NAME}
    ${CLI_CORE_ARG_TYPE}
    --                      : Names of the parents.

Debug Arguments
    --source -s      [Flag] : Source stdin.

Global Arguments
    ${CLI_GLOBAL_ARG_HELP}
    ${CLI_GLOBAL_ARG_SELF_TEST}

Examples
    For example, writing a type variable of type 'metadata' consisting of 
    
        a field 'positional' of type 'boolean' and 
        a field 'allow' of type 'map_of map' 
        
    where 'positional' is 'true' and 'allow' is has a key 'color' which points at a 
    map whose keys are 'black' and 'white' and whose values are empty:

        cli core struct define --name metadata \
            | cli core struct define-field --name positional --type boolean \
            | cli core struct define-field --name allow --type 'map_of map' \
            | cli core declare --source --name meta --type metadata \
            | cli core declare --source --name meta -- allow color black \
            | cli core declare --source --name meta -- allow color white \
            | cli core declare --source --name meta -- positional true \
            | cli core write --source --name meta

    would produce the following records: 

        allow color black
        allow color white
        positional true
EOF
}

::cli::core::write::inline() {
    inline "$@"
}

inline() {
    : ${arg_name?}    
    : ${arg_type:=${CLI_SCOPE[${arg_name}]}}

    local -n ref=${arg_name}

    # leaf
    if arg_type=${arg_type} ::cli::core::type::is_builtin::inline; then

        # map
        if [[ "${arg_type}" == 'map' ]]; then
            for key in ${!ref[@]}; do
                local value=${ref[$key]}
                ::cli::bash::write::inline "$@" "${key}" "${value}"
            done

        # array
        elif [[ "${arg_type}" == 'array' ]]; then
            for key in ${ref[@]}; do
                ::cli::bash::write::inline "$@" "${key}"
            done

        # scaler
        else
            ::cli::bash::write::inline "$@" "${ref}"
        fi

    # node
    elif arg_type=${arg_type} ::cli::core::type::is_modified::inline; then
        local field_type=$(arg_type=${arg_type} ::cli::core::type::unmodify::inline)

        # map_of
        for field_name in "${!ref[@]}"; do
            local field_variable=${arg_name}${CLI_NSS}${ref[${field_name}]}

            arg_type=${field_type} \
            arg_name=${field_variable} \
                ::cli::core::write::inline "$@" "${field_name}"
        done

    # node
    else

        # user defined type
        local -n fields=CLI_TYPE__${arg_type^^}
        for field_name in ${!fields[@]}; do
            local field_type=${fields[$field_name]}
            local field_variable=${arg_name}${CLI_NSS}${field_name^^}

            arg_type=${field_type} \
            arg_name=${field_variable} \
                ::cli::core::write::inline "$@" ${field_name}
        done
    fi
}

main() {
    if ${arg_source}; then
        source /dev/stdin
    fi

    arg_name=${arg_name} \
        inline "$@"
}

self_test() {

    declare STRING='Hello World!'
    declare -p STRING \
        | cli core write --source --name STRING --type string \
        | assert::pipe_eq_exact \
            'Hello\ World!'

    declare -i INTEGER=42
    declare -p INTEGER \
        | cli core write --source --name INTEGER --type integer \
        | assert::pipe_eq \
            '42'

    declare BOOLEAN=true
    declare -p BOOLEAN \
        | cli core write --source --name BOOLEAN --type boolean \
        | assert::pipe_eq \
            'true'

    declare -A MAP=( [key]=value [element]= )
    declare -p MAP \
        | cli core write --source --name MAP --type map \
        | sort \
        | assert::pipe_records_eq \
            'element' \
            'key value'

    declare -a ARRAY=( a a b a )
    declare -p ARRAY \
        | cli core write --source --name ARRAY --type array \
        | assert::pipe_records_eq \
            'a' 'a' 'b' 'a'

    cli core declare --name MOD_MAP --type 'map_of map' -- seq pi 3141 \
        | cli core declare --source --name MOD_MAP -- seq fib 11235 \
        | cli core write --source --name MOD_MAP \
        | sort \
        | assert::pipe_eq \
            'seq fib 11235' \
            'seq pi 3141'
exit
    cli core declare --name MOD --type 'map_of map_of integer' -- seq pi 3141 \
        | cli core declare --source --name MOD -- seq fib 11235 \
        | cli core write --source --name MOD \
        | sort \
        | assert::pipe_eq \
            'seq fib 11235' \
            'seq pi 3141'
            
    cli core declare --name MOD_ARRAY --type 'map_of array' -- seq pi \
        | cli core declare --source --name MOD_ARRAY -- seq fib \
        | cli core write --source --name MOD_ARRAY \
        | assert::pipe_eq \
            'seq pi' \
            'seq fib'

    cli core struct define --name version \
        | cli core struct define-field --name major --type integer \
        | cli core struct define-field --name minor --type integer \
        | cli core struct define --source --name metadata \
        | cli core struct define-field --name allow --type 'map_of map' \
        | cli core struct define-field --name mmm --type 'map_of map_of map' \
        | cli core struct define-field --name positional --type boolean \
        | cli core struct define-field --name version --type version \
        | cli core declare --source --name META --type metadata \
        | cli core declare --source --name META -- positional true \
        | cli core declare --source --name META -- allow color black \
        | cli core declare --source --name META -- allow color white \
        | cli core declare --source --name META -- mmm a b c d \
        | cli core declare --source --name META -- version major 1 \
        | cli core declare --source --name META -- version minor 2 \
        | cli core write --source --name META \
        | sort \
        | assert::pipe_records_eq \
            'allow color black' \
            'allow color white' \
            'mmm a b c d' \
            'positional true' \
            'version major 1' \
            'version minor 2'
}

cli::load "$@"