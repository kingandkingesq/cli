#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::import cli bash emit statement initialize
cli::import cli core type to-bash

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}

Summary
    Emit initialized locals given a type.

Description
    \$1 is the variable type.

    Emit local bash declarations for variable ARG of the supplied type that are
    initialized. 
EOF
}

::cli::core::emit::local::inline() {
    local TYPE=${1-}
    [[ "${TYPE}" ]] || cli::assert 'Missing variable type.'
    shift

    local -n TYPE_REF=${TYPE}

    set -- "${!TYPE_REF[@]}"
    while (( $# > 0 )); do
        local NAME=$1
        shift

        local VARIABLE_NAME="ARG_${NAME}"

        ::cli::core::type::to_bash::inline ${TYPE_REF[$NAME]}
        local FLAGS=${REPLY}

        ::cli::bash::emit::statement::initialize::inline "${VARIABLE_NAME}" ${FLAGS} <<< '""'
    done

#     cat <<-EOF
# declare -A CLI_SCOPE_LAST=()
# ::cli::bash::map::copy::inline CLI_SCOPE CLI_SCOPE_LAST ${VARIABLES[@]}

# declare CLI_RESULT=0
# if ! ${TARGET} "\$@"; then CLI_RESULT=\$?; fi

# ::cli::bash::map::copy::inline CLI_SCOPE_LAST CLI_SCOPE ${VARIABLES[@]}
# return \${CLI_RESULT}
# EOF

}

self_test() {
    local ARG_SCOPE='MY_SCOPE'

    local -Ar CLI_TYPE_TEST=( 
        [STRING_FIELD]='string'
        [BOOLEAN_FIELD]='boolean'
        [INTEGER_FIELD]='integer'
        [ARRAY_FIELD]='array'
        [MAP_FIELD]='map'
    )

    local -A MY_SCOPE+=()

${CLI_COMMAND[@]} -- CLI_TYPE_TEST my::target
exit
    diff <(${CLI_COMMAND[@]} -- CLI_TYPE_TEST) - <<-EOF
		declare -a MY_TEST_ARRAY_FIELD=(
		    [0]="x"
		    [1]="y"
		    [2]="z"
		)
		declare -- MY_TEST_BOOLEAN_FIELD="true"
		declare -i MY_TEST_INTEGER_FIELD="21"
		declare -A MY_TEST_MAP_FIELD=(
		    [z]="26"
		)
		declare -- MY_TEST_STRING_FIELD="Hi world!"
		
		CLI_SCOPE+=(
		    [MY_TEST]="test"
		    [MY_TEST_ARRAY_FIELD]="array"
		    [MY_TEST_BOOLEAN_FIELD]="boolean"
		    [MY_TEST_INTEGER_FIELD]="integer"
		    [MY_TEST_MAP_FIELD]="map"
		    [MY_TEST_STRING_FIELD]="string"
		)
		EOF
}
