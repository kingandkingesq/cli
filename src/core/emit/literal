#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::import cli core variable get-info
cli::import cli bash emit literal string
cli::import cli bash emit literal map
cli::import cli bash emit literal array

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}

Summary
    Emit a literal value for a variable.

Description
    ARG_SCOPE is the name of the scope.

    \$1 is the name of the variable.
EOF
}

::cli::core::emit::literal::inline() {
    : "${ARG_SCOPE?'Missing scope.'}"

    local NAME="${1-}"
    [[ "${NAME}" ]] || cli::assert 'Missing name'

    ::cli::core::variable::get_info::inline "${NAME}" \
        || cli::assert "Variable '${NAME}' not in scope."
    local TYPE="${REPLY}"

    if ${REPLY_CLI_CORE_VARIABLE_IS_USER_DEFINED}; then
        # user defined types have no backing bash variable
        return

    elif ${REPLY_CLI_CORE_VARIABLE_IS_SCALER}; then
        ::cli::bash::emit::literal::string::inline ${NAME}

    elif ${REPLY_CLI_CORE_VARIABLE_IS_MAP} || \
        ${REPLY_CLI_CORE_VARIABLE_IS_MODIFIED}; then
        ::cli::bash::emit::literal::map::inline ${NAME}

    elif ${REPLY_CLI_CORE_VARIABLE_IS_ARRAY}; then
        ::cli::bash::emit::literal::array::inline ${NAME}
    fi
}

self_test() {
    local ARG_SCOPE='MY_SCOPE'
    
    local -A MY_SCOPE=(
        [MY_STRING]='string'
        [MY_BOOLEAN]='boolean'
        [MY_INTEGER]='integer'
        [MY_ARRAY]='array'
        [MY_MAP]='map'
    )

    local MY_STRING='Hello world!'
    local MY_BOOLEAN='true'
    local -i MY_INTEGER=42
    local -a MY_ARRAY=( a b c )
    local -A MY_MAP=( [a]=0 )

    local -A MY_SCOPE+=(
        [MY_MODIFIED]='map_of string'
        [MY_MODIFIED_0]='string'
    )

    local -A MY_MODIFIED=( [Hello]=0 )
    local MY_MODIFIED_0='World!'

    local -Ar CLI_TYPE_TEST=( 
        [STRING_FIELD]='string'
        [BOOLEAN_FIELD]='boolean'
        [INTEGER_FIELD]='integer'
        [ARRAY_FIELD]='array'
        [MAP_FIELD]='map'
    )

    local -A MY_SCOPE+=(
        [MY_TEST]='test'
        [MY_TEST_STRING_FIELD]='string'
        [MY_TEST_BOOLEAN_FIELD]='boolean'
        [MY_TEST_INTEGER_FIELD]='integer'
        [MY_TEST_ARRAY_FIELD]='array'
        [MY_TEST_MAP_FIELD]='map'
    )
    local MY_TEST_STRING_FIELD='Hi world!' 
    local MY_TEST_BOOLEAN_FIELD=true 
    local -i MY_TEST_INTEGER_FIELD=21 
    local -a MY_TEST_ARRAY_FIELD=( x y z )
    local -A MY_TEST_MAP_FIELD=( [z]=26 )

    diff <(${CLI_COMMAND[@]} MY_STRING; echo) - <<< '"Hello world!"'
    diff <(${CLI_COMMAND[@]} MY_BOOLEAN; echo) - <<< '"true"'
    diff <(${CLI_COMMAND[@]} MY_INTEGER; echo) - <<< '"42"'
    diff <(${CLI_COMMAND[@]} MY_ARRAY; echo) - <<-EOF
		(
		    [0]="a"
		    [1]="b"
		    [2]="c"
		)
		EOF
    diff <(${CLI_COMMAND[@]} MY_MAP; echo) - <<-EOF
		(
		    [a]="0"
		)
		EOF
    diff <(${CLI_COMMAND[@]} MY_MODIFIED; echo) - <<-EOF
		(
		    [Hello]="0"
		)
		EOF
    diff <(${CLI_COMMAND[@]} MY_MODIFIED_0; echo) - <<< '"World!"'
    diff <(${CLI_COMMAND[@]} MY_TEST) /dev/null
}
