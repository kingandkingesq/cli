#!/usr/bin/env CLI_NAME=cli bash-cli
cli::import cli-emit

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}

Description
    Emit a function that globally declares a type and initializes its fields.

Arguments
    --                      : 1) The type name
                              2) The function name
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

main() {
    local ARG_TYPE=${1-}
    local ARG_FUNCTION_NAME=${2-}

    : ${ARG_TYPE:?}
    : ${ARG_FUNCTION_NAME:?}

    {
        echo "cli::core::scope::add \$1 ${ARG_TYPE}" 
        echo

        while read name type; do
            case $type in
                boolean) echo "cli::declare::boolean \$1_${name}" ;;
                string) echo "cli::declare::string \$1_${name}" ;;
                integer) echo "cli::declare::integer \$1_${name}" ;;
                map) echo "cli::declare::map \$1_${name}" ;;
                array) echo "cli::declare::array \$1_${name}" ;;
            esac
        done
    } | emit::function ${ARG_FUNCTION_NAME}
}

self_test() {
    declare -Ag CLI_TYPE_TEST=( 
        [MY_STRING]='string'
        [MY_BOOLEAN]='boolean'
        [MY_INTEGER]='integer'
        [MY_ARRAY]='array'
        [MY_MAP]='map'
    )

    cli::write CLI_TYPE_TEST map \
        | ${CLI_COMMAND[@]} -- CLI_TYPE_TEST my_func 
        # \
        # | assert::pipe_eq \
        #     'my_func() {' \
        #     '    CLI_SCOPE[$1]="CLI_TYPE_TEST"' \
        #     '    declare -g "$1_MY_BOOLEAN=true"' \
        #     '    declare -gA "$1_MY_MAP=()"' \
        #     '    declare -g "$1_MY_STRING="' \
        #     '    declare -ga "$1_MY_ARRAY=()"' \
        #     '    declare -gi "$1_MY_INTEGER=0"' \
        #     '}'
}
