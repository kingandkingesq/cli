#!/usr/bin/env CLI_NAME=cli bash-cli-part

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    Writes a record escaping default IFS characters; Opposite of 'read'.

Description
    Tables consist of records which are lines containing fields separated by
    whilespace found in IFS which have whitespace contained within them
    (plus backslash) escaped with a backslash. This function accepts a set
    of arguments, and prints a record consisting of those arguments.

    This operationn is the inverse of 'read' with default IFS; A record written
    with 'write' can be read with 'read' using the default value of IFS.

    This is different than print '%q' which is the inverse of eval and has a
    different set of escaping rules. 
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

::cli::bash::write::inline() {
    while (( $# > 0 )); do
        local field="$1"

        field="${field//\\/\\\\}"
        field="${field// /\\ }"
        field="${field//$'\t'/\\$'\t'}"

        echo -n "${field}"
        if (( $# > 1 )); then
            echo -n " "
        fi

        shift
    done

    echo
}

self_test() {
    write() { ::cli::bash::write::inline "$@"; }

    diff <(write 'x' $' ' $'\t' '\' | read -a ARRAY; declare -p ARRAY) \
        - <<< "declare -a ARRAY=([0]=\"x\" [1]=\" \" [2]=\$'\t' [3]=\"\\\\\")" \
        || cli::assert

    diff <(write $'\a' | read -a ARRAY; declare -p ARRAY) \
        - <<< "declare -a ARRAY=([0]=\$'\a')" \
        || cli::assert

    diff <(write 'a b' | read -a ARRAY; declare -p ARRAY) \
        - <<< "declare -a ARRAY=([0]=\"a b\")" \
        || cli::assert
}
