#!/usr/bin/env bash
source $(cli loader ---exports)
cli::import_parent_group
cli::import cli-assert

help() {
    cat << EOF | cli::help::global
Command
    ${CLI_COMMAND}
    
Summary
    Writes a record escaping default IFS characters; Opposite of 'read'.

Description
    Tables consist of records which are lines containing fields separated by
    whilespace found in IFS which have any whitespace contained within them
    (plus backslash) escaped with a backslash. This function accepts a set
    of arguments, and prints a record consisting of those arguments.

    This operationn is the inverse of 'read' with default IFS; A record written
    with 'write' can be read with 'read' using the default value of IFS. 

Arguments
    --                      : The fields of the table record.

Examples
    Write and read a record with fields 'x', space, tab, and backslash.
        ${CLI_COMMAND} -- 'x' $' ' $'\t' '\' | read -a ARRAY; declare -p ARRAY
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

main() {
    ::cli::bash::write::inline "$@"
}

::cli::bash::write::inline() {
    while (( $# > 0 )); do
        local field="$1"
        field="${field//\\/\\\\}"
        field="${field// /\\ }"
        field="${field//$'\t'/\\$'\t'}"

        echo -n "${field}"
        if (( $# > 1 )); then
            echo -n " "
        fi

        shift
    done

    echo
}

self_test() {
    ${CLI_COMMAND} -- 'x' $' ' $'\t' '\' | read -a ARRAY; declare -p ARRAY \
    | assert::pipe_eq_exact \
        "declare -a ARRAY=([0]=\"x\" [1]=\" \" [2]=\$'\t' [3]=\"\\\\\")"

    ${CLI_COMMAND} -- $'\a' | read -a ARRAY; declare -p ARRAY \
    | assert::pipe_eq_exact \
        "declare -a ARRAY=([0]=\$'\a')"

    ${CLI_COMMAND} -- 'a b' | read -a ARRAY; declare -p ARRAY \
    | assert::pipe_eq_exact \
        "declare -a ARRAY=([0]=\"a b\")"
}

cli::main "$@"
