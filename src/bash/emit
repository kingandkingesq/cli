#!/usr/bin/env bash
source $(cli loader ---exports)
cli::import_parent_group
cli::import cli-assert

help() {
    cat << EOF | cli::help::sourceable | cli::help::global
Command
    ${CLI_COMMAND}
    
Summary
    Emit a variable declaration.

Description
    Emit a variable declaration for each variable but unlike 'declare -p' emit
    nothing if either (1) the variable is not declared, or (2) no names, or only 
    empty names, are specified.

    Any variable names that end in '*' are expanded to include all variable names
    with a matching prefix.

Arguments
    --                      : The variables to emit.
EOF
    cat << EOF

Examples
    Emit the embedded variable 'MY_STRING'.
        declare MY_STRING='Hello World!'
        declare -p MY_STRING \
            | ${CLI_COMMAND} --source -- MY_STRING

    Emit the embedded variables that start with 'MY_'.
        declare MY_STRING='Hello World!'
        declare -i MY_NUMBER=42
        declare -p MY_STRING MY_NUMBER \
            | ${CLI_COMMAND} -- MY_* \

    Emit nothing.
        ${CLI_COMMAND}

    Emit nothing.
        ${CLI_COMMAND} -- ''
EOF
}

cli::meta::declare() {
    cli::meta::add_flag 'source'
    cli::meta::allow_positional
}

::cli::bash::emit::inline() {
    for name in "$@"; do
        if [[ "${name}" =~ ^.*[*]$ ]]; then
            # declare -p \
            #     | grep "^declare [-A-Za-z]* ${name:0:-1}" \
            #     || true # grep fails on no match but we want it to succeed

            # the syntax ${!VAR*} will only print *initialized* variables
            # (e.g. 'declare VAR=' but not 'declare VAR') whereas the above
            # grep will print both initialized and uninitialized variables
            # The one above is slow. Instead we choose to initialize all
            # variables so we can use the faster one below.
            
            ::cli::bash::emit::inline $(eval "echo \${!${name}}")
        elif [[ -z "${name}" ]]; then
            continue
        else
            set +e
            declare -p "${name}" 2> /dev/null
            set -e
        fi
    done
}

main() {
    if ${ARG_SOURCE}; then
        source /dev/stdin
    fi

    ::cli::bash::emit::inline "$@"
}

self_test() {

    # local MY_STRING='Hello world!'
    # local -i MY_NUMBER=42
    # local -A MY_MAP
    # local -a MY_ARRAY

    # declare -p MY_STRING MY_NUMBER MY_MAP MY_ARRAY \
    #     | ${CLI_COMMAND} --source -- 'MY_STRING' \
    #     | assert::pipe_eq \
    #         "declare -- MY_STRING=\"Hello world!\"" 

    # declare -p MY_STRING MY_NUMBER MY_MAP MY_ARRAY \
    #     | ${CLI_COMMAND} --source --  MY_STRING MY_NUMBER MY_NOT_DEFINED \
    #     | sort -k3,3 \
    #     | assert::pipe_eq \
    #         "declare -i MY_NUMBER=\"42\"" \
    #         "declare -- MY_STRING=\"Hello world!\""

    # declare -p MY_STRING MY_NUMBER MY_MAP MY_ARRAY \
    #     | ${CLI_COMMAND} --source -- 'MY_*' \
    #     | sort -k3,3 \
    #     | assert::pipe_eq \
    #         'declare -i MY_NUMBER="42"' \
    #         'declare -- MY_STRING="Hello world!"'

    # declare -p MY_STRING MY_NUMBER MY_MAP MY_ARRAY \
    #     | ${CLI_COMMAND} --source -- "NOOP_*" \
    #     | assert::pipe_eq

    ${CLI_COMMAND} -- "" \
        | assert::pipe_eq

    # ${CLI_COMMAND} -- MY_NOT_DEFINED \
    #     | assert::pipe_eq
}

cli::main "$@"
