#!/usr/bin/env CLI_NAME=cli bash-cli
cli::import cli bash declare

help() {
    cat << EOF |  cli::core::variable::help
Command
    ${CLI_COMMAND[@]}
    
Summary
    Declare a global bash variable or variables for a given type and initialize it. 

Description
    Argument $1 is the bash type which can be either string, boolean,
    integer, map, or array. A string type variable is initialized to the
    empty string, boolean to false, integer to zero, map to an empty 
    associative array, and array to an empty array.

    Argument $2 is the name of the global bash variable to declare and initialize.

    Subsequent positional arguments pairs of type/name can be passed and will be
    declared an initialized in turn.
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

::cli::bash::initialize::inline() {
    ::cli::bash::declare::inline "$@"

    while (( $# > 0 )); do

        local ARG_TYPE=$1
        shift

        local ARG_NAME=$1
        shift

        local -n ref=${ARG_NAME}
        case ${ARG_TYPE} in
            'integer') ref=0 ;;
            'array') ;&
            'map') ref=() ;;
            'boolean') ref='false' ;;
            'string') ref='' ;;
        esac
    done
}

self_test() {

    cmd() {
        ::cli::bash::initialize::inline "$@"

        while (( $# > 0 )); do
            shift
            declare -p $1
            shift
        done
    }

    diff <(cmd string VAR) - <<< 'declare -- VAR=""' || cli::assert
    diff <(cmd boolean VAR) - <<< 'declare -- VAR="false"' || cli::assert
    diff <(cmd integer VAR) - <<< 'declare -i VAR="0"' || cli::assert
    diff <(cmd array VAR) - <<< 'declare -a VAR=()' || cli::assert
    diff <(cmd map VAR) - <<< 'declare -A VAR=()' || cli::assert
    diff <(cmd string MY_STRING map MY_MAP) - <<-EOF || cli::assert
		declare -- MY_STRING=""
		declare -A MY_MAP=()
		EOF
}