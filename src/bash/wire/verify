#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::import cli bash variable declare
cli::import cli bash write
cli::import cli core variable initialize
cli::import cli core type is-builtin

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    Read records representing bash variables and emits bash declaring them.

Description

Arguments
    --                      : 1) File to source (optional)
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

main() {    
    local -A names=()

    while read -a REPLY; do
        ::cli::bash::wire::verify::inline "${REPLY[@]}"
        ::cli::bash::write::inline "${REPLY[@]}"
    done
}

::cli::bash::wire::verify::inline() {
    : ${1?'Missing required variable name.'}
    local ARG_NAME=$1
    shift

    : ${1?'Missing required variable type.'}
    local ARG_TYPE=$1
    shift

    # map
    if [[ ${ARG_TYPE} == 'map' ]]; then
        cli::assert "(( $# <= 2 ))" \
            "Unexpected extra fields during assignment of map '${ARG_NAME}' key '$1' with value '${2-}'." \
            "Expected a record with two or fewer fields, but got ( $@ )."

        [[ "$1" =~ '.' ]] || cli::assert \
            "Unexpected empty key during assigment of value '${2-}' to map '${ARG_NAME}'."

        if [[ ${ARG_TYPE} == 'map_of' ]]; then
            [[ "${2-}" =~ '.' ]] || cli::assert \
                "Unexpected assignment of empty value to map '${ARG_NAME}' key '$1'."
        fi

        return
    fi

    cli::assert "(( $# < 2 ))"  \
        "Failed to assign '${1-}' to '${ARG_TYPE} ${ARG_NAME}'." \
        "Expected a record with one or no fields, but got $#. Fields are: '$@'"
}

self_test() {
    ${CLI_COMMAND[@]} "$@" << EOF
        MY_STRING string 'Hello\ world!'
        MY_INTEGER integer 42
        MY_ARRAY array element_0
        MY_ARRAY array element_1
        MY_MAP map key_0 value_0
        MY_MAP map key_1 value_1
EOF
    exit

    cli dsl sample ---load \
        | cli core records load -- CLI_META cli_meta /dev/null \
        | sort -u \
        | cli core records put
    exit

    set_escaping() {

        # string
        declare MY_STRING=""
        declare -p MY_STRING \
            | ${CLI_COMMAND[@]} -s --name MY_STRING --type string -- 'Hello world!' \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -- MY_STRING="Hello world!"'

        # array
        declare -a MY_ARRAY
        declare -p MY_ARRAY \
            | ${CLI_COMMAND[@]} -s --name MY_ARRAY --type array -- "a b c" \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -a MY_ARRAY=([0]="a b c")'

        # map
        declare -A MY_MAP
        declare -p MY_MAP \
            | ${CLI_COMMAND[@]} -s --name MY_MAP --type map -- a "b c" \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -A MY_MAP=([a]="b c" )'
    }

    set_builtin() {

        # string
        declare MY_STRING=""
        declare -p MY_STRING \
            | ${CLI_COMMAND[@]} -s --name MY_STRING --type string -- 'Hello' \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -- MY_STRING="Hello"'

        # boolean
        declare MY_BOOLEAN=false
        declare -p MY_BOOLEAN \
            | ${CLI_COMMAND[@]} -s --name MY_BOOLEAN --type boolean -- true \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -- MY_BOOLEAN="true"'

        # integer
        declare -i MY_INTEGER=0
        declare -p MY_INTEGER \
            | ${CLI_COMMAND[@]} -s --name MY_INTEGER --type integer -- 42 \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -i MY_INTEGER="42"'

        # array
        declare -a MY_ARRAY
        declare -p MY_ARRAY \
            | ${CLI_COMMAND[@]} -s --name MY_ARRAY --type array -- a \
            | ${CLI_COMMAND[@]} -s --name MY_ARRAY --type array -- b \
            | ${CLI_COMMAND[@]} -s --name MY_ARRAY --type array -- c \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -a MY_ARRAY=([0]="a" [1]="b" [2]="c")'

        # map
        declare -A MY_MAP
        declare -p MY_MAP \
            | ${CLI_COMMAND[@]} -s --name MY_MAP --type map -- a 0 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP --type map -- b 1 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP --type map -- c 2 \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -A MY_MAP=([c]="2" [b]="1" [a]="0" )'
    }

    set_builtin_default() {

        # string
        declare MY_STRING=""
        declare -p MY_STRING \
            | ${CLI_COMMAND[@]} -s --name MY_STRING --type string -- 'Hello world!' \
            | ${CLI_COMMAND[@]} -s --name MY_STRING --type string \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -- MY_STRING=\"\""


        # boolean
        declare MY_BOOLEAN=false
        declare -p MY_BOOLEAN \
            | ${CLI_COMMAND[@]} -s --name MY_BOOLEAN --type boolean -- true \
            | ${CLI_COMMAND[@]} -s --name MY_BOOLEAN --type boolean \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -- MY_BOOLEAN="false"'

        # integer
        declare -i MY_INTEGER=0
        declare -p MY_INTEGER \
            | ${CLI_COMMAND[@]} -s --name MY_INTEGER --type integer -- 42 \
            | ${CLI_COMMAND[@]} -s --name MY_INTEGER --type integer \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -i MY_INTEGER="0"'

        # array
        declare -a MY_ARRAY=()
        declare -p MY_ARRAY \
            | ${CLI_COMMAND[@]} -s --name MY_ARRAY --type array \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -a MY_ARRAY=()'

        # map
        declare -A MY_MAP=()
        declare -p MY_MAP \
            | ${CLI_COMMAND[@]} -s --name MY_MAP --type map \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -A MY_MAP=()'
    }

    set_indirect() {

        # string
        declare -A MY_MAP_OF_STRING=()
        declare -p MY_MAP_OF_STRING \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_STRING --type 'map_of string' -- x 'Hello World' \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_STRING=([x]=\"0\" )" \
                "declare -- MY_MAP_OF_STRING_0=\"Hello World\""

        # boolean
        declare -A MY_MAP_OF_BOOLEAN=()
        declare -p MY_MAP_OF_BOOLEAN \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_BOOLEAN --type 'map_of boolean' -- x true \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_BOOLEAN=([x]=\"0\" )" \
                "declare -- MY_MAP_OF_BOOLEAN_0=\"true\""

        # integer
        declare -A MY_MAP_OF_INTEGER=()
        declare -p MY_MAP_OF_INTEGER \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_INTEGER --type 'map_of integer' -- x 42 \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_INTEGER=([x]=\"0\" )" \
                "declare -i MY_MAP_OF_INTEGER_0=\"42\""

        # array
        declare -A MY_MAP_OF_ARRAY=()
        declare -p MY_MAP_OF_ARRAY \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_ARRAY --type 'map_of array' -- x a b c \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_ARRAY=([x]=\"0\" )" \
                "declare -a MY_MAP_OF_ARRAY_0=([0]=\"a\" [1]=\"b\" [2]=\"c\")"

        # map
        declare -A MY_MAP_OF_MAP=()
        declare -p MY_MAP_OF_MAP \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_MAP --type 'map_of map' -- x a 0 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_MAP --type 'map_of map' -- x b 1 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_MAP --type 'map_of map' -- y a 0 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_MAP --type 'map_of map' -- y a \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -A MY_MAP_OF_MAP=([y]="1" [x]="0" )' \
                'declare -A MY_MAP_OF_MAP_0=([b]="1" [a]="0" )' \
                "declare -A MY_MAP_OF_MAP_1=([a]=\"\" )"
    }

    set_indirect_default() {

        # string
        declare -A MY_MAP_OF_STRING=()
        declare -p MY_MAP_OF_STRING \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_STRING --type 'map_of string' -- x \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_STRING=([x]=\"0\" )" \
                "declare -- MY_MAP_OF_STRING_0=\"\""

        # boolean
        declare -A MY_MAP_OF_BOOLEAN=()
        declare -p MY_MAP_OF_BOOLEAN \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_BOOLEAN --type 'map_of boolean' -- x \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_BOOLEAN=([x]=\"0\" )" \
                "declare -- MY_MAP_OF_BOOLEAN_0=\"false\""

        # integer
        declare -A MY_MAP_OF_INTEGER=()
        declare -p MY_MAP_OF_INTEGER \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_INTEGER --type 'map_of integer' -- x \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_INTEGER=([x]=\"0\" )" \
                "declare -i MY_MAP_OF_INTEGER_0=\"0\""

        # array
        declare -A MY_MAP_OF_ARRAY=()
        declare -p MY_MAP_OF_ARRAY \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_ARRAY --type 'map_of array' -- x \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_ARRAY=([x]=\"0\" )" \
                "declare -a MY_MAP_OF_ARRAY_0=()"

        # map
        declare -A MY_MAP_OF_MAP=()
        declare -p MY_MAP_OF_MAP \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_MAP --type 'map_of map' -- x \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -A MY_MAP_OF_MAP=([x]="0" )' \
                'declare -A MY_MAP_OF_MAP_0=()'
    }

    set_udt() {

        # indirect
        declare -A CLI_TYPE_VERSION=(['major']='integer' ['minor']='integer')
        declare -A MY_MAP_OF_VERSION=()
        declare -p \
            CLI_TYPE_VERSION \
            MY_MAP_OF_VERSION \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x major 1 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x minor 2 \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_VERSION=([x]=\"0\" )" \
                "declare -i MY_MAP_OF_VERSION_0_MAJOR=\"1\"" \
                "declare -i MY_MAP_OF_VERSION_0_MINOR=\"2\""

        # indirect no key
        declare -A CLI_TYPE_VERSION=(['major']='integer' ['minor']='integer')
        declare -A MY_MAP_OF_VERSION=()
        declare -p \
            CLI_TYPE_VERSION \
            MY_MAP_OF_VERSION \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_VERSION=()" \

        # indirect key but no field
        declare -A CLI_TYPE_VERSION=(['major']='integer' ['minor']='integer')
        declare -A MY_MAP_OF_VERSION=()
        declare -p \
            CLI_TYPE_VERSION \
            MY_MAP_OF_VERSION \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_VERSION=([x]=\"0\" )" \
                "declare -i MY_MAP_OF_VERSION_0_MAJOR=\"0\"" \
                "declare -i MY_MAP_OF_VERSION_0_MINOR=\"0\""

        # indirect default
        declare -A CLI_TYPE_VERSION=(['major']='integer' ['minor']='integer')
        declare -A MY_MAP_OF_VERSION=()
        declare -p \
            CLI_TYPE_VERSION \
            MY_MAP_OF_VERSION \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x major 1 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x major \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                "declare -A MY_MAP_OF_VERSION=([x]=\"0\" )" \
                "declare -i MY_MAP_OF_VERSION_0_MAJOR=\"0\"" \
                "declare -i MY_MAP_OF_VERSION_0_MINOR=\"0\""

        # direct
        declare -A CLI_TYPE_UDT=(['positional']='boolean' ['allow']='map_of map' ['version']='version')
        declare -- MY_UDT_POSITIONAL=false
        declare -i MY_UDT_VERSION_MAJOR=0
        declare -i MY_UDT_VERSION_MINOR=0
        declare -A MY_UDT_ALLOW=()
        declare -p \
            CLI_TYPE_UDT \
            CLI_TYPE_VERSION \
            MY_UDT_POSITIONAL \
            MY_UDT_VERSION_MAJOR \
            MY_UDT_VERSION_MINOR \
            MY_UDT_ALLOW \
            | ${CLI_COMMAND[@]} -s --name MY_UDT --type udt -- positional true \
            | ${CLI_COMMAND[@]} -s --name MY_UDT --type udt -- version minor 2 \
            | ${CLI_COMMAND[@]} -s --name MY_UDT --type udt -- version major 1 \
            | ${CLI_COMMAND[@]} -s --name MY_UDT --type udt -- allow color white \
            | ${CLI_COMMAND[@]} -s --name MY_UDT --type udt -- allow color black \
            | cli bash variable emit --source -- 'MY_*' \
            | assert::pipe_eq \
                'declare -A MY_UDT_ALLOW=([color]="0" )' \
                'declare -A MY_UDT_ALLOW_0=([black]="" [white]="" )' \
                'declare -- MY_UDT_POSITIONAL="true"' \
                'declare -i MY_UDT_VERSION_MAJOR="1"' \
                'declare -i MY_UDT_VERSION_MINOR="2"'
    }

    test_missing_field() {

        # indirect
        set +e
        declare -A CLI_TYPE_VERSION=(['major']='integer' ['minor']='integer')
        declare -A MY_MAP_OF_VERSION=()
        declare -p \
            CLI_TYPE_VERSION \
            MY_MAP_OF_VERSION \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x major 1 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x minor 2 \
            | ${CLI_COMMAND[@]} -s --name MY_MAP_OF_VERSION --type 'map_of version' -- x missing 3 \
              2>&1 >/dev/null \
            | assert::error_message "Field 'missing' not found in 'version' fields: { minor major }."
        assert::failed
        set -e
    }

    test_bad_value() {
        set +e
        declare MY_BOOLEAN
        declare -p MY_BOOLEAN \
            | ${CLI_COMMAND[@]} -s --type boolean --name MY_BOOLEAN -- 'bad' \
              2>&1 >/dev/null \
            | assert::error_message "Failed to assign 'bad' to boolean 'MY_BOOLEAN'." \
                "'bad' does not match regex '^$|^true$|^false$'."
        assert::failed

        declare -i MY_INTEGER
        declare -p MY_INTEGER \
            | ${CLI_COMMAND[@]} -s --type integer --name MY_INTEGER -- 'bad' \
              2>&1 >/dev/null \
            | assert::error_message "Failed to assign 'bad' to integer 'MY_INTEGER'." \
                "'bad' does not match regex '^$|^[-]?[0-9]+$'."
        assert::failed

        declare -A MY_MAP
        declare -p MY_MAP \
            | ${CLI_COMMAND[@]} -s --type map --name MY_MAP -- '' 'val' \
              2>&1 >/dev/null \
            | assert::error_message "Failed to use empty key to assign 'val' to map 'MY_MAP'." \
                "'' does not match regex '.'."
        assert::failed
        set -e
    }

    test_too_many_values() {
        set +e
        declare MY_BOOLEAN
        declare -p MY_BOOLEAN \
            | ${CLI_COMMAND[@]} -s --type boolean --name MY_BOOLEAN -- 'true' 'bad' \
              2>&1 >/dev/null \
            | assert::error_message "Failed to assign 'true' to boolean 'MY_BOOLEAN'." \
                "Expected a record with one or no fields, but got 'true bad'."
        assert::failed

        declare -A MY_MAP
        declare -p MY_MAP \
            | ${CLI_COMMAND[@]} -s --type map --name MY_MAP -- 'key' 'value' 'bad' \
              2>&1 >/dev/null \
            | assert::error_message "Failed to assign value 'value' to key 'key' in map 'MY_MAP'." \
                "Expected a record with two or fewer fields, but got 'key value bad'."
        assert::failed
        set -e
    }

    set_escaping
    set_builtin
    set_builtin_default

    set_indirect
    set_indirect_default

    set_udt

    test_bad_value
    test_too_many_values
    test_missing_field
}
