#!/usr/bin/env CLI_NAME=cli bash-cli-part

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    List variables that are initialized and match a provided name.

Description
    Positional arguments \$1, \$2, etc are variable names that optionally end in '*'.

    All variables which match any of the positional arguments are copied to stdout.

    If a variable does not exist, nothing is printed.

Arguments
    --                      : The variables names to emit.
EOF
    cat << EOF

Examples
    Emit the embedded variable 'MY_STRING'.
        declare MY_STRING='Hello World!'
        declare -p MY_STRING \\
            | ${CLI_COMMAND[@]} ---source ---mapfile MY_STRING

    Emit the embedded variables that start with 'MY_'.
        declare MY_STRING='Hello World!'
        declare -i MY_NUMBER=42
        declare -p MY_STRING MY_NUMBER \\
            | ${CLI_COMMAND[@]} ---source ---mapfile MY_* \

    Emit nothing.
        ${CLI_COMMAND[@]} -- ''
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

::cli::bash::variable::list::inline() {
    MAPFILE=()

    for name in "$@"; do

        if [[ ! "${name}" ]]; then
            continue

        elif [[ "${name}" =~ ^.*[*]$ ]]; then
            for match in $(eval "echo \${!${name}}"); do
                # do not recurse! test -v arr=() is false
                MAPFILE+=( "${match}" )
            done

        elif [[ -v "${name}" ]]; then
            MAPFILE+=( "${name}" )

        else
            # declare -a arr=()
            for match in $(eval "echo \${!${name}*}"); do
                if [[ "${match}" == "${name}" ]]; then
                    MAPFILE+=( "${name}" )
                fi
            done
        fi
    done
}

self_test() {
    ${CLI_COMMAND[@]} ---mapfile \
        | diff <(:) - || cli::assert

    ${CLI_COMMAND[@]} ---mapfile MY_NOT_DEFINED \
        | diff <(:) - || cli::assert

    ${CLI_COMMAND[@]} ---mapfile MY_NOT_DEFINED* \
        | diff <(:) - || cli::assert

    # declared
    local MY_DECL_STRING
    local -a MY_DECL_ARRAY
    local -A MY_DECL_MAP
    local -i MY_DECL_NUMBER

    # declared and initialized
    local MY_EMPTY_STRING=""
    local -a MY_EMPTY_ARRAY=()
    local -A MY_EMPTY_MAP=()

    # declared, initialized, and set
    local MY_STRING='Hello world!'
    local -a MY_ARRAY=(a)
    local -A MY_MAP=([a]=0)
    local -i MY_NUMBER=42

    # basic reporting
    ${CLI_COMMAND[@]} ---mapfile 'MY_STRING' \
        | diff <(echo 'MY_STRING') -
    ${CLI_COMMAND[@]} ---mapfile 'MY_STR*' \
        | diff <(echo 'MY_STRING') -

    # declared only variables are not reported
    ${CLI_COMMAND[@]} ---mapfile \
        MY_DECL_ARRAY \
        MY_DECL_MAP \
        MY_DECL_STRING \
        MY_DECL_NUMBER \
        | diff <(:) - || cli::assert

    # initialized values are reported (wild card)
    ${CLI_COMMAND[@]} ---mapfile 'MY_*' \
        | sort -k3 \
        | diff <(cat <<-EOF
			MY_ARRAY
			MY_EMPTY_ARRAY
			MY_EMPTY_MAP
			MY_EMPTY_STRING
			MY_MAP
			MY_NUMBER
			MY_STRING
			EOF
        ) -

    # initialized values are reported (explicit)
    ${CLI_COMMAND[@]} ---mapfile \
        MY_ARRAY \
        MY_EMPTY_ARRAY \
        MY_EMPTY_MAP \
        MY_EMPTY_STRING \
        MY_MAP \
        MY_NUMBER \
        MY_STRING \
        | sort -k3 \
        | diff <(cat <<-EOF
			MY_ARRAY
			MY_EMPTY_ARRAY
			MY_EMPTY_MAP
			MY_EMPTY_STRING
			MY_MAP
			MY_NUMBER
			MY_STRING
			EOF
        ) -
}
