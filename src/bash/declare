#!/usr/bin/env bash
source $(cli loader ---exports)
cli::import_group
cli::import cli-assert

help() {
    cat << EOF | cli::help::global
Command
    ${CLI_COMMAND}
    
Summary
    Declare a bash variable or variables for a given type. 

Description
    Declares a global bash variable of the provided type. Valid types are

        string
        boolean
        integer
        map
        array
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

main() {
    ::cli::bash::declare::inline "$@"

    while (( $# > 0 )); do
        shift
        declare -p $1
        shift
    done
}

::cli::bash::declare::inline() {

    while (( $# > 0 )); do

        local ARG_TYPE=${1?'Missing variable type.'}
        shift

        local ARG_NAME=${1?'Missing variable name.'}
        shift

        # initialize declare flags
        local flags=g
        case ${ARG_TYPE} in
            'integer') flags+=i ;;
            'array') flags+=a ;;
            'map') flags+=A ;;
            'boolean') ;&
            'string') ;;
            *) cli::fail "Cannot declare variable of unknown type '${ARG_TYPE}'."
        esac

        # declare the bash variable
        declare -${flags} ${ARG_NAME}
    done
}

self_test() {

    # string
    ${CLI_COMMAND} -- string VAR \
        | assert::pipe_eq \
            'declare -- VAR'

    # boolean
    ${CLI_COMMAND} -- boolean VAR \
        | assert::pipe_eq \
            'declare -- VAR'

    # integer
    ${CLI_COMMAND} -- integer VAR \
        | assert::pipe_eq \
            'declare -i VAR'

    # array
    ${CLI_COMMAND} -- array VAR \
        | assert::pipe_eq \
            'declare -a VAR'

    # map
    ${CLI_COMMAND} -- map VAR \
        | assert::pipe_eq \
            'declare -A VAR'
    
    # many
    ${CLI_COMMAND} -- \
        string MY_STRING \
        map MY_MAP \
        | assert::pipe_eq \
            'declare -- MY_STRING' \
            'declare -A MY_MAP'
}

cli::main "$@"
