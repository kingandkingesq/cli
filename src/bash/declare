#!/usr/bin/env CLI_NAME=cli bash-cli

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    Declare a bash variable or variables for a given type. 

Description
    Argument $1 is the type and $2 is the name of the variable and so forth
    for $3 and $4 etc. Names must be valid bash names and will be declared
    globally.

    Valid types are

        string
        boolean
        integer
        map
        array

    Variable are _not_ initialized. So if 'set -u' is enabled, then dereferencing
    a variable will result in an 'unbound variable' error. 
EOF
}

cli::meta::declare() {
    cli::meta::allow_positional
}

main() {
    ::cli::bash::declare::inline "$@"

    while (( $# > 0 )); do
        shift
        declare -p $1
        shift
    done
}

::cli::bash::declare::inline() {

    while (( $# > 0 )); do

        local ARG_TYPE=${1?'Missing variable type.'}
        shift

        local ARG_NAME=${1?'Missing variable name.'}
        shift

        # initialize declare flags
        local flags=g
        case ${ARG_TYPE} in
            'integer') flags+=i ;;
            'array') flags+=a ;;
            'map') flags+=A ;;
            'boolean') ;&
            'string') ;;
            *) cli::fail "Cannot declare variable of type '${ARG_TYPE}'."
        esac

        # declare the bash variable
        declare -${flags} ${ARG_NAME}
    done
}

self_test() {
    [[ "$(main string VAR)" == "declare -- VAR" ]] || cli::assert
    [[ "$(main boolean VAR)" == "declare -- VAR" ]] || cli::assert
    [[ "$(main integer VAR)" == "declare -i VAR" ]] || cli::assert
    [[ "$(main array VAR)" == "declare -a VAR" ]] || cli::assert
    [[ "$(main map VAR)" == "declare -A VAR" ]] || cli::assert

    diff <( main string MY_STRING map MY_MAP ) - <<-EOF || cli::assert
		declare -- MY_STRING
		declare -A MY_MAP
		EOF
}
