#!/usr/bin/env bash
source $(cli loader)
cli::import cli_assert

help() {
    cat << EOF
Command
    cli path join

Summary
    Join segments into an absolute path.

Description
    Join segments into a path using a supplied delimiter (e.g. '/' or '::'
    depending on whether the cli is unpacked or packed). Each segment may
    contain alpha-numeric characters or dash and may optionally start with
    period. Each dash is replaced with underbar during the join. 

Arguments
    --delimiter  [Required] : Default: /. Allowed values: /, ::.
    --base                  : Base path. Value is simply prepended
                              to the joined segments. Default is the delimiter.
    --                      : Segments to join into a path.

Global Arguments
    --help -h    [Flag] : Show this message and exit.
    --self-test  [Flag] : Runs a self test over all commands.

Examples
    Join segments 'foo' 'bar' into '/foo/bar'
        cli path -- foo bar

    Join segments '.foo-bar' into '/.foo_bar'
        cli path -- .foo-bar

    Join segments 'foo' 'bar' into '::foo::bar'
        cli path --delimiter :: -- foo bar

    Join base 'usr' with segments 'foo' 'bar' into '/usr/foo/bar'
        cli path --base usr -- foo bar

EOF
}

main() {
    local GLOB="?([.])[a-zA-Z0-9]*([a-zA-Z0-9-])"
  
    : ${arg_base:=$arg_delimiter}

    if [[ ! "${arg_base}" == ${arg_delimiter}* ]]; then
        echo "Unexpected relative base path '${arg_base}'. Base path must be absolute." >&2
        exit 1
    fi

    local path="${arg_base:-${arg_delimiter}}"

    while (( $# > 0 )); do

        # ensure uniformity of group names (e.g. foo-bar, not foo_bar)
        if [[ ! "$1" == $GLOB ]]; then
            echo "Unexpected segment '$1' does not match '${GLOB}'." >&2
            exit 1
        fi

        # if path does not end in a arg_delimiter, then add one (e.g. '::' or '/')
        if [[ -n "${path}" && ! "${path}" =~ .*${arg_delimiter}$ ]]; then
            path="${path}${arg_delimiter}"
        fi

        # convert command or group name into file or function name (e.g. foo-bar -> foo_bar)
        path="${path}${1//-/_}"
        shift
    done

    echo "${path}"
}

self_test() {
    cli path join -- foo bar \
        | assert::pipe_eq \
            '/foo/bar'
            
    cli path join -- .foo-bar \
        | assert::pipe_eq \
            '/.foo_bar'
            
    cli path join --delimiter :: -- foo bar \
        | assert::pipe_eq \
            '::foo::bar'
            
    cli path join --base /usr -- foo bar \
        | assert::pipe_eq \
            '/usr/foo/bar'

    if cli path join --base usr -- foo bar 2> /dev/null; then
        assert::fail 'Failed to reject relative base path.'
    fi

    if cli path join -- foo_bar 2> /dev/null; then
        assert::fail 'Failed to reject join containing underbar.'
    fi 
}

cli::load "$@"
