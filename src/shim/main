#!/usr/bin/env CLI_NAME=cli bash-cli
cli::import cli shim which

help() {
    cat << EOF | cli::help::global
Command
    ${CLI_COMMAND[@]}
    
Summary
    ...
EOF
}

::cli::shim::main::inline() {
    
    # CLI_NAME
    [[ ${CLI_NAME-} ]] \
        || cli::assert "Shim failed to set CLI_NAME."

    # CLI_COMMAND
    local -a CLI_COMMAND=( "${CLI_NAME}" )
    while [[ "${1-}" =~ ${CLI_REGEX_NAME} ]]; do
        CLI_COMMAND+=( "$1" )
        shift
    done

    # BASH_ARGV0
    ::cli::shim::which::inline BASH_ARGV0 "${CLI_COMMAND[@]}" \
        || cli::assert "Failed to find shim for '${CLI_COMMAND[@]}'."

    [[ -f "$0" ]] \
        || cli::assert "Source file '$0' for command '${CLI_COMMAND[@]}' does not exist."

    [[ -x "$0" ]] \
        || cli::assert "Source file '$0' for command '${CLI_COMMAND[@]}' is not executable."

    # optimization; skip creating subshell if we are the root
    if (( $$ == ${BASHPID} )); then 
        cli::main "$@"
        return
    fi

    ( cli::main "$@" )
}

self_test() {
    which() {
        ::cli::which::inline REPLY "$@"
        echo "${REPLY}"
    }

    diff <(echo $0) <(which cli which) || cli::assert

    cli::temp::dir DIR
    local FOO_SHIM="${DIR}/foo"
    local FOO_SRC_DIR="${DIR}/src"
    local FOO_BAR="${DIR}/src/bar"
    
    # emit foo shim
    cat <<-EOF > "${FOO_SHIM}"
		#!/usr/bin/env bash-cli-shim
		CLI_SHIM_ROOT_DIR+='/src'
		foo() {
		    local CLI_NAME=${FUNCNAME}
		    cli::loader::shim "$@"
		}
		EOF
    chmod a+x "${FOO_SHIM}"

    # shim /src
    mkdir "${FOO_SRC_DIR}"

    # emit bar command
    cat <<-EOF > "${FOO_BAR}"
		#!/usr/bin/env CLI_NAME=cli bash-cli
		::foo::bar() { :; }
		EOF
    chmod a+x "${FOO_BAR}"

    # update PATH
    PATH+=":${DIR}"

    # which foo
    resolve foo bar
}
