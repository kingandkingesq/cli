#!/usr/bin/env bash
source $(cli loader)
cli::import cli_assert

help() {
cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Parse declare flags.

Description
    For each variable name read from stdin, print a record with fields for
    type, named, reference, export, and case where type is 'string', 'array',
    'map', or 'integer', case is 'upper', 'lower', or 'level', and the other
    fields are either 'true' or 'false'.

Arguments
    --                      : Variable names.

Global Arguments
    --help -h        [Flag] : Show this message and exit.
    --self-test      [Flag] : Runs a self test.
EOF
}

inline() {
    local -a record=()
    local flags
    local name
    declare -p $1 | read _ flags REPLY

    # derefernce named variables
    if [[ "${flags}" == *n* && "${REPLY}" =~ \"(.*)\" ]]; then
        declare -p ${BASH_REMATCH[1]} | read _ flags _
        flags="${flags}n"
    fi

    case "${flags}" in
        *a*) record+=( 'array' );;
        *A*) record+=( 'map' );;
        *i*) record+=( 'integer' );;
        *) record+=( 'string' );;
    esac

    case "${flags}" in
        *n*) record+=( 'true' );;
        *) record+=( 'false' );;
    esac

    case "${flags}" in
        *r*) record+=( 'true' );;
        *) record+=( 'false' );;
    esac

    case "${flags}" in
        *x*) record+=( 'true' );;
        *) record+=( 'false' );;
    esac

    case "${flags}" in
        *u*) record+=( 'upper' );;
        *l*) record+=( 'lower' );;
        *) record+=( 'level' );;
    esac

    echo "${record[@]}"
}

main() {
    while (( $# > 0 )); do
        inline $1
        shift
    done
}

self_test() {
    declare string
    declare -a array
    declare -A map
    declare -i integer

    readonly ro_string

    export x_string

    declare -u u_string
    declare -l l_string

    main string array map integer ro_string x_string u_string l_string \
        | assert::pipe_eq \
            'string false false false level' \
            'array false false false level' \
            'map false false false level' \
            'integer false false false level' \
            'string false true false level' \
            'string false false true level' \
            'string false false false upper' \
            'string false false false lower' 

    declare -n ref='map'
    main ref \
        | assert::pipe_eq \
        'map true false false level'
}

cli::load "$@"