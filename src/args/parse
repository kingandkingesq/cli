#!/usr/bin/env bash
source $(cli loader ---exports)
cli::import_group
cli::import cli-assert

help() {
    cat << EOF | cli::help::global
Command
    ${CLI_COMMAND}
    
Summary
    Parse a command line.

Description
    Consume a stream of tokens produced via 'cli args tokenize' and produce a
    serialized stream of 'cli_args'. Accept as the first positional argument
    a serialized stream of 'map' of aliases. Aliases will be resolved.

Arguments
    --                      : Metadata stream.
EOF
    cat << EOF

Examples
    Parse 'grp cmd --option value -hg -- a0 a1'
        cli args tokenize -- grp cmd --option value -h --param/key value -- a0 a1 \\
        | ${CLI_COMMAND} -- <( echo 'h help' )

    Produces:
        path grp
        path cmd
        property param key value
        positional a0
        positional a1
        named help 
        named option value
EOF
}

main() {
    cli::declare 'map' ALIAS
    cli::read ALIAS < "${1-/dev/null}"

    cli::declare 'cli_args' ARGS

    cli::declare 'cli_tokens' TOKENS
    while read token_name identifier; do
        local token="CLI_ARG_TOKEN_${token_name}"

        TOKENS_ID+=( "${!token}" )
        TOKENS_IDENTIFIER+=( "${identifier}" )
    done

    ARG_ALIAS=ALIAS \
    ARG_ARGS=ARGS \
    ARG_TOKENS=TOKENS \
        ::cli::args::parse::inline

    cli::write ARGS 'cli_args'
}

::cli::args::parse::inline() {
    : ${ARG_ARGS?}
    local -n ALIAS_REF=${ARG_ALIAS}
    local -n TOKEN_REF="${ARG_TOKENS}_ID"
    local -n IDENTIFIER_REF="${ARG_TOKENS}_IDENTIFIER"
    
    local -i named_count=0
    local -i current=0
    local token_name=
    local identifier=
    local token=

    read_token() {
        token=${TOKEN_REF[$current]}
        token_name=${CLI_ARG_TOKEN[$token]}
        identifier=${IDENTIFIER_REF[$current]}

        # if (( $# > 0 )); then
        #     assert_token_is "$@"
        # fi
        current=$(( current + 1 ))
    }

    START() {
        read_token

        while (( token != CLI_ARG_TOKEN_EOF )); do

            if (( token == CLI_ARG_TOKEN_PATH )); then
                SEGMENT
            elif (( token == CLI_ARG_TOKEN_DASH )); then
                FLAG
            elif (( token == CLI_ARG_TOKEN_DASH_DASH )); then
                OPTION
            elif (( token == CLI_ARG_TOKEN_DASH_DASH_DASH )); then
                INTERNAL_OPTION
            elif (( token == CLI_ARG_TOKEN_END_OPTIONS )); then
                POSITIONAL
            else
                cli::fail "Unexpected arg '${identifier}' (token type ${token_name})" \
                    "encountered while parsing cli."
            fi
        done
    }

    POSITIONAL() {
        read_token

        while (( token != CLI_ARG_TOKEN_EOF )); do
            # assert_token_is TOKEN_VALUE
            cli::put ${ARG_ARGS} positional "${identifier}"
            read_token
        done
    }

    FLAG() {

        # trap for unknown arguments
        local alias="${ALIAS_REF[$identifier]-}"
        if [[ -z "${alias}" ]]; then
            cli::fail "Unexpected unknown alias \"-${identifier}\"" \
                "passed as argument ? to command '${CLI_COMMAND}'."
        fi

        identifier="${alias}"
        OPTION
    }

    INTERNAL_OPTION() {
        local option="${identifier}"
        read_token

        # list of values (typically only one but could be array or properties)
        while (( token == CLI_ARG_TOKEN_VALUE )); do
            read_token 
        done
    }

    OPTION() {
        local option="${identifier}"
        read_token

        if (( named_count == 0 )); then
            cli::put ${ARG_ARGS} first_named "${option}"
        fi
        named_count=$(( named_count + 1 ))
        
        # flags
        if (( token != CLI_ARG_TOKEN_VALUE )); then
            cli::put ${ARG_ARGS} named "${option}" ''
            return
        fi

        # list of values (typically only one but could be array or properties)
        while (( token == CLI_ARG_TOKEN_VALUE )); do
            cli::put ${ARG_ARGS} named "${option}" "${identifier}"
            read_token 
        done
    }

    SEGMENT() {
        cli::put ${ARG_ARGS} path "${identifier}"
        read_token
    }

    START
}

self_test() {
    cli args tokenize -- --myarr a b c --myprops a=0 b=1 c=2 \
        | ${CLI_COMMAND} \
        | assert::pipe_eq \
            'first_named myarr' \
            'named myprops a=0' \
            'named myprops b=1' \
            'named myprops c=2' \
            'named myarr a' \
            'named myarr b' \
            'named myarr c'

    cli args tokenize -- x y z -h --help opt --help key=value -- a0 a1 \
        | ${CLI_COMMAND} -- <( echo $'h help\nt test\n' ) \
        | assert::pipe_eq \
            'first_named help' \
            'path x' \
            'path y' \
            'path z' \
            'positional a0' \
            'positional a1' \
            'named help ' \
            'named help opt' \
            'named help key=value'
}

cli::main "$@"