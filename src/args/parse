#!/usr/bin/env bash
source $(cli loader)
cli::import_group
cli::import cli_assert
cli::import cli util deserialize
cli::import cli util serialize
cli::import cli util readset

help() {
    cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Parse a command line.

Description
    Parse a command line by consuming a stream generated by 'cli args tokenize' 
    concatenated with a stream of metadata generated by 'cli util serialize' 
    consisting of the following variables:

        CLI_META_REQUIRED
        CLI_META_DEFAULT
        CLI_META_IMPLICIT_VALUES
        CLI_META_ALIASES
        CLI_META_ALLOWED_VALUES 
        CLI_META_POSITIONAL

    CLI_META_REQUIRED is an array of required options. For example, ( name ).

    CLI_META_DEFAULT is an associative array of default values which are
    assigned when the option is not present on the command line. All known
    options must have a default. For example, ( [help]=false ).

    CLI_META_IMPLICIT_VALUES is an associatie array of implicit values which
    are assigned when the option is present on the command line but no value
    is supplied or the value is the empty string. For example, ( [help]=true ).

    CLI_META_ALIASES is an assoicative array of aliases, typically a single 
    letter. For example, ( [h]=help ). 

    CLI_META_ALLOWED_VALUES is an associative array of space delimited allowed 
    values for a given option. For example, ( [help]='true false' ). 

    CLI_META_POSITIONAL is a boolean and specifies if positional arguments 
    are accepted.

Arguments
    --result -r     : Array to store command name. Default: RESULT.
    --options -o    : Associative array of optional arguments. Default: options.
    --positional -p : Array of positional arguments. Default: positional.

Global Arguments
    --help -h        [Flag] : Show this message and exit.
    --self-test      [Flag] : Runs a self test.

Examples
    Parse 'grp cmd --option value -hg -- a0 a1'.
        ${CLI_COMMAND} -- grp cmd --option value -hg -- a0 a1
EOF
}

inline() {

    local -n ref_options=${arg_options}
    local -n ref_positional=${arg_positional}

    local name
    local alias
    local value

    # options
    for option in "${!ref_options[@]}"; do
        value="${ref_options[$option]}"

        # resolve aliases
        alias=${CLI_META_ALIASES[$option]-}
        if [[ -n ${alias} ]]; then
            unset 'ref_options[$option]'
            option=${alias}
            ref_options[$option]="${value}"
        fi

        # trap for unknown arguments
        if [[ -z ${CLI_META_DEFAULT[$option]+set} ]]; then
            cli::fail "Unexpected unknown argument \"--${option}\"."
        fi

        # trap for empty value and assign implicit value
        if [[ -z "${value}" && -n ${CLI_META_IMPLICIT_VALUES[$option]+set} ]]; then
            ref_options+=( [$option]="${CLI_META_IMPLICIT_VALUES[$option]}" )
        fi
    done

    # default values
    for option in ${!CLI_META_DEFAULT[@]}; do

        # assign defaults to options not supplied on the command line
        if [[ -z ${ref_options[$option]+set} ]]; then
            ref_options+=( [$option]="${CLI_META_DEFAULT[$option]}" )
        fi
    done

    # required
    for option in "${CLI_META_REQUIRED[@]}"; do
        if [[ -z "${ref_options[$option]-}" ]]; then
            cli::fail "Missing required argument \"--${option}\"."
        fi
    done

    # allowed values
    for option in "${!CLI_META_ALLOWED_VALUES[@]}"; do

        # allowed values keys should have at least been assigned a default value
        value=${ref_options[$option]?Unexpected bad allowed value metadata for \"${option}\".}

        # load allowed values into set
        local -A allowed_values=()
        arg_name=allowed_values ::cli::util::readset::inline \
            < <(printf '%s\n' ${CLI_META_ALLOWED_VALUES[$option]})

        # test set for allowed value
        if ! ${allowed_values[$value]-false}; then
            cli::fail "Unexpected value '${value}' for argument \"--${option}\"."
        fi
    done

    # positional
    if ! ${CLI_META_POSITIONAL} && (( ${#ref_positional[@]} > 0 )); then
        cli::fail "Unexpected positional argument(s)."
    fi
}

main() {    
    # declare tokens
    declare -a ${arg_result}
    declare -A ${arg_options}
    declare -a ${arg_positional}

    # initialize tokens (i.e. command line lacks options or positional args)
    local -n ref_options=${arg_options}
    local -n ref_positional=${arg_positional}
    ref_options=()
    ref_positional=()

    # declare metadata
    declare -A CLI_META_ALIASES
    declare -A CLI_META_DEFAULT
    declare -A CLI_META_ALLOWED_VALUES
    declare -a CLI_META_REQUIRED
    declare -A CLI_META_IMPLICIT_VALUES
    declare CLI_META_POSITIONAL

    # deserialize tokens and metadata
    ::cli::util::deserialize::inline

    inline "$@"

    ::cli::util::serialize::inline \
        ${arg_result} \
        ${arg_options} \
        ${arg_positional}
}

self_test() {
    local tokenize='cli args tokenize'

    local -A CLI_META_DEFAULT=( [color]='black' )
    local -A CLI_META_IMPLICIT_VALUES=()
    local -a CLI_META_REQUIRED=( 'color' )
    local -A CLI_META_ALIASES=( [c]='color' )
    local -A CLI_META_ALLOWED_VALUES=( [color]='black white' )
    local CLI_META_POSITIONAL=false

    meta() {
        ::cli::util::serialize::inline \
            CLI_META_REQUIRED \
            CLI_META_IMPLICIT_VALUES \
            CLI_META_DEFAULT \
            CLI_META_ALIASES \
            CLI_META_ALLOWED_VALUES \
            CLI_META_POSITIONAL
    }

    # # default value (e.g. black)
    cat <(meta) <(${tokenize}) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'options A color black'

    # # override default value (e.g. white)
    cat <(meta) <(${tokenize} -- --color white) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'options A color white'

    # # override default value (e.g. white)
    cat <(meta) <(${tokenize} -- --color green) \
        | assert::fails "${CLI_COMMAND}"

    local -A CLI_META_DEFAULT=( [help]='false' )
    local -A CLI_META_IMPLICIT_VALUES=( [help]='true' )
    local -a CLI_META_REQUIRED=()
    local -A CLI_META_ALIASES=( [h]='help' )
    local -A CLI_META_ALLOWED_VALUES=( [help]='true false' )
    local CLI_META_POSITIONAL=false

    # # add flag (e.g. help is 'false')
    cat <(meta) <(${tokenize}) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'options A help false'

    # set flag (e.g. '--help' -> help is 'true')
    cat <(meta) <(${tokenize} -- --help) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'options A help true'

    # set flag via alias (e.g. '-h' -> help is 'true')
    cat <(meta) <(${tokenize} -- -h) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'options A help true'

    # flag is boolean (e.g. '--help maybe' disallowed)
    cat <(meta) <(${tokenize} -- --help maybe) \
        | assert::fails "${CLI_COMMAND}"

    local -A CLI_META_DEFAULT=( [name]='' )
    local -A CLI_META_IMPLICIT_VALUES=()
    local -a CLI_META_REQUIRED=( 'name' )
    local -A CLI_META_ALIASES=()
    local -A CLI_META_ALLOWED_VALUES=()
    local CLI_META_POSITIONAL=false

    # provide required options argument (e.g. '--name Bob')
    cat <(meta) <(${tokenize} -- --name Bob) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'options A name Bob'

    # missing required options argument (e.g. missing '--name')
    cat <(meta) <(${tokenize}) \
        | assert::fails "${CLI_COMMAND}" 'missing requried'

    local -A CLI_META_DEFAULT=()
    local -A CLI_META_IMPLICIT_VALUES=()
    local -a CLI_META_REQUIRED=()
    local -A CLI_META_ALIASES=()
    local -A CLI_META_ALLOWED_VALUES=()
    local CLI_META_POSITIONAL=true

    # positional argument (e.g. '-- a0 a1')
    cat <(meta) <(${tokenize} -- -- a0 a1) \
        | ${CLI_COMMAND} \
        | assert::pipe_records_eq \
        'positional a a0' \
        'positional a a1'

    local -A CLI_META_DEFAULT=()
    local -A CLI_META_IMPLICIT_VALUES=()
    local -a CLI_META_REQUIRED=()
    local -A CLI_META_ALIASES=()
    local -A CLI_META_ALLOWED_VALUES=()
    local CLI_META_POSITIONAL=false

    # positional arguments disallowed (e.g. '-- a0')
    cat <(meta) <(${tokenize} -- -- a0) \
        | assert::fails "${CLI_COMMAND}" 'positional'
}

cli::load "$@"