#!/usr/bin/env bash
source $(cli loader)
cli::import_group
cli::import cli_assert
cli::import_inline cli name to-bash
cli::import_inline cli bash emit

help() {
    cat << EOF
Command
    ${CLI_COMMAND}
    
Summary
    Assign command line values to 'arg_*' variables.

Description
    Consume a stream generated by

        cli args emit

    and generate a sequence of declare statements to include the variables

        arg__ : an associative array of the named arguments
        arg_  : an array of the positional arguments

    plus for each named argument

        arg_name : the value of named argument 'name'

Arguments
    --prefix -p             : The prefix of the declared variables. Default: arg.

Global Arguments
    --help -h        [Flag] : Show this message and exit.
    --self-test      [Flag] : Runs a self test.
EOF
}

inline() {
    : ${arg_args:="${CLI_STRUCT_DEFAULT_VARIABLE}"}
    : ${arg_prefix:="arg"}

    local -n POSITIONAL_ARGS=${arg_args}_POSITIONAL
    local -n OPTIONAL_ARGS=${arg_args}_NAMED

    local -a names=( "${!OPTIONAL_ARGS[@]}" )
    local -a bash_names=()
    arg_result=bash_names \
        ::cli::name::to_bash::inline "${names[@]}"

    declare -ga ${arg_prefix}_
    declare -n ref_=${arg_prefix}_
    ref_=( "${POSITIONAL_ARGS[@]}" )

    declare -gA ${arg_prefix}__
    declare -n ref__=${arg_prefix}__
    ref__=()

    for (( i=0; i < ${#names[@]}; i++ )); do
        local name=${names[${i}]}
        local bash_name=${bash_names[${i}]}
        local value="${OPTIONAL_ARGS[${name}]}"
        ref__+=( [${bash_name}]=${value} )
        declare -g ${arg_prefix}_${bash_name}="${value}"
    done
}

main() {   
    cli::declare cli_args
    cli::read

    local prefix=${arg_prefix}

    unset arg_prefix
    unset arg_help
    unset arg_self_test
    unset arg_
    unset arg__

    arg_prefix=${prefix} \
    arg_args=STRUCT \
        inline "$@"

    ::cli::bash::emit::inline "${prefix}_*"
}

self_test() {

    ${CLI_COMMAND} < /dev/null \
        | sort \
        | assert::pipe_records_eq \
            'declare -A arg__=()' \
            'declare -a arg_=()'

    cat <(cli dsl sample -h \
            | cli dsl tokenize \
            | cli dsl parse \
            | cli dsl meta \
            | cli dsl bgen \
            | sed s/^/meta\ /) \
            <(cli args tokenize -- -f banana -h --header Foo --id 42 -- a0 a1 \
            | sed s/^/args\ /) \
            | cli args parse \
        | ${CLI_COMMAND} \
        | sort \
        | assert::pipe_records_eq \
            'declare -- arg_display_args="false"' \
            'declare -- arg_fruit="banana"' \
            'declare -- arg_header="Foo"' \
            'declare -- arg_help="true"' \
            'declare -- arg_id="42"' \
            'declare -- arg_run_as=""' \
            'declare -- arg_self_test="false"' \
            'declare -A arg__=([display_args]="false" [fruit]="banana" [id]="42" [self_test]="false" [run_as]="" [help]="true" [header]="Foo" )' \
            'declare -a arg_=([0]="a0" [1]="a1")'
}

cli::main "$@"