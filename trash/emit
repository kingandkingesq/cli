#!/usr/bin/env bash
source $(cli loader ---exports)
cli::import_group
cli::import cli emit initialize
cli::import cli_emit

help() {
    cat << EOF | cli::help::global
Command
    ${CLI_COMMAND}
EOF
}

cli::meta::declare() {
    :
}

# name of function which declares variables and verifies/assigns values
INITIALIZE=initialize

main() {    
    local -a declarations # eg +=( 'arg_foo' )
    local -A names # eg +=( ['--foo']='arg_foo' ) and maybe +=( ['-f']='arg_foo' )
    local -A flags # eg +=( ['arg_bar']='true' )
    local -A regex # eg +=( ['--foo']='^.*$' )
    local -A defaults # eg +=( ['arg_foo']='bar' )
    local -A allowed_values # eg +=( [--foo]='a b c' )
    local -A required # eg +=( [--foo]='' )
    local any_args=false

    local name
    local arg_name
    local switch_name
    local -a allowed_value_list

    # productions are sorted
    while read group key production production_name identifier; do

        # anyargs
        if (( production == CLI_DSL_PRODUCTION_ANYARGS )); then
            any_args=true

        # declaration
        elif (( production == CLI_DSL_PRODUCTION_NAME )); then
            name="${identifier}"
            arg_name="arg_${name//-/_}"
            switch_name="--${name}"
            declarations+=( "${arg_name}" )
            names+=( [${switch_name}]="${arg_name}" )

        # alias
        elif (( production == CLI_DSL_PRODUCTION_ALIAS )); then
            names+=( [-${identifier}]="${arg_name}" )

        # regex
        elif (( production == CLI_DSL_PRODUCTION_REGEX )); then
            regex+=( [${switch_name}]="${identifier}" )

        # defaults
        elif (( production == CLI_DSL_PRODUCTION_DEFAULT )); then
            defaults+=( [${arg_name}]="${identifier}" )

        # required
        elif (( production == CLI_DSL_PRODUCTION_REQUIRED )); then
            required+=( [${switch_name}]='' )

        # flag
        elif (( production == CLI_DSL_PRODUCTION_FLAG )); then
            flags+=( [${arg_name}]='true' )

        # allowed
        elif (( production == CLI_DSL_PRODUCTION_ALLOWED )); then
            allowed_value_list=()
        elif (( production == CLI_DSL_PRODUCTION_ALLOWED_VALUE )); then
            allowed_value_list+=( "${identifier}" )
        elif (( production == CLI_DSL_PRODUCTION_ALLOWED_END )); then
            allowed_values+=( [${switch_name}]="${allowed_value_list[@]}" )
        fi
    done

    # code generation
    {
        {
            for i in "${declarations[@]}"; do
                emit::declare_global "${i}" 
            done 
            if ${any_args}; then
                emit::declare_global_array 'arg_' 
            fi
            emit::declare_global_map 'arg__'
        } \
            | emit::header 'declarations'

        {
            for i in "${!defaults[@]}"; do
                emit::assign_string "${i}" "${defaults[$i]}" 
            done
            for i in "${!flags[@]}"; do
                emit::assign "${i}" 'false'
            done
        } | emit::header 'defaults'

        { 
            {
                for i in "${!names[@]}"; do
                    arg_name="${names[$i]}"
                    if [[ "${flags[$arg_name]+true}" == 'true' ]]; then
                        emit::map_set 'arg__' "${arg_name}" 'true'
                        emit::assign "${arg_name}" 'true'
                    else
                        emit::map_set 'arg__' "${arg_name}" "\${2:-}"
                        emit::assign_string "${arg_name}" "\${2:-}"
                        emit::shift
                    fi \
                        | emit::inline \
                        | emit::case_inline "${i}"

                done
                if ${any_args}; then
                    { emit::shift; echo 'arg_=( "$@" )'; emit::break; } \
                        | emit::inline \
                        | emit::case_inline '--'
                fi
                emit::error "Unexpected argument '\$1'." \
                    | emit::case_default
            } | emit::case_statement "\$1"
            emit::shift | emit::if_inline "(( \$# > 0 ))"
        } \
            | emit::while "(( \$# > 0 ))" \
            | emit::header 'assign variables from command line arguments'

        for i in "${!required[@]}"; do
            emit::error "Missing required argument '${i}'." |
                emit::if_empty ${names[$i]}
        done | emit::header 'required'

        for i in "${!allowed_values[@]}"; do
            {
                for j in ${allowed_values[$i]}; do
                    emit::case_noop "${j}" 
                done
                emit::error "Unexpected value '\${${names[$i]}}' for argument '${i}'." \
                    | emit::case_default
            } | emit::case_statement "\${${names[$i]}}"
        done | emit::header 'allowed values'

        {
            for i in "${!regex[@]}"; do
                local regex=${regex[$i]}
                if [[ -z ${required[$i]+set} ]]; then
                    regex="^$|${regex}"
                fi

                emit::error "Unexpected value '\${${names[$i]}}' for argument '${i}'" \
                    "does not match regex ${regex[$i]}." \
                    | emit::if "[[ ! \"\${${names[$i]}}\" =~ ${regex} ]]" 
            done
        } | emit::header 'regex'

    } | emit::function ${INITIALIZE}
}

emit::if_inline() {
    read
    echo "if $1; then ${REPLY}; fi"
}

self_test() (
    source /dev/stdin < <(cli_assert)

    cd "$(dirname ${BASH_SOURCE})"

    "./sample" -h \
        | "./tokenize" \
        | "./parse" \
        | "./emit" \
        | source /dev/stdin

    expected() {
        
        # declarations
        declare -g arg_run_as=""
        declare -g arg_fruit=""
        declare -g arg_header=""
        declare -g arg_display_args=""
        declare -g arg_help=""
        declare -g arg_self_test=""
        declare -ga arg_=()
        declare -gA arg__=()
        
        # defaults
        arg_fruit="banana"
        arg_self_test=false
        arg_help=false
        arg_display_args=false
        
        # assign variables from command line arguments
        while (( $# > 0 )); do
            case "$1" in
                '--help') arg__[arg_help]="true"; arg_help=true ;;
                '--self-test') arg__[arg_self_test]="true"; arg_self_test=true ;;
                '--fruit') arg__[arg_fruit]="${2:-}"; arg_fruit="${2:-}"; shift ;;
                '--display-args') arg__[arg_display_args]="true"; arg_display_args=true ;;
                '--header') arg__[arg_header]="${2:-}"; arg_header="${2:-}"; shift ;;
                '-f') arg__[arg_fruit]="${2:-}"; arg_fruit="${2:-}"; shift ;;
                '-h') arg__[arg_help]="true"; arg_help=true ;;
                '--run-as') arg__[arg_run_as]="${2:-}"; arg_run_as="${2:-}"; shift ;;
                '--') shift; arg_=( "$@" ); break ;;
                *)
                    echo "Unexpected argument '$1'." >&2
                    exit 1
                ;;
            esac
            if (( $# > 0 )); then shift; fi
        done
        
        # required
        if [[ -z "${arg_header}" ]]; then
            echo "Missing required argument '--header'." >&2
            exit 1
        fi
        
        # allowed values
        case "${arg_fruit}" in
            'orange') ;;
            'banana') ;;
            *)
                echo "Unexpected value '${arg_fruit}' for argument '--fruit'." >&2
                exit 1
            ;;
        esac
        
        # regex
        if [[ ! "${arg_header}" =~ ^[A-Z][A-Za-z0-9_]*$ ]]; then
            echo "Unexpected value '${arg_header}' for argument '--header' does not match regex ^[A-Z][A-Za-z0-9_]*$." >&2
            exit 1
        fi
    }

    set +e
    diff <(declare -f expected) <(declare -f initialize) \
        | assert::pipe_eq \
            '1c1' \
            '< expected () ' \
            '---' \
            '> initialize () '
    set -e 
)

cli::main "$@"