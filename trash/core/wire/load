#!/usr/bin/env CLI_NAME=cli bash-cli-part
# cli::source cli core variable declare
cli::source cli core type is-builtin
cli::source cli core type is-modified
cli::source cli bash write

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    Load joins records with type information to form tuples ( name, type, value ).

Description
    Given a stream of records read from stdin and positional arguments:

        1) a bash name prefix 
        2) type metadata as tuples ( name type ), 
        3) bash to source that contains user defined types

    generate tuples of (name, type, value). 

Arguments
    --                          : 1) Variable name prefix
                                  2) Pairs of name/type
                                  3) Stream of bash to source
EOF
}

main() {
    local ARG_PREFIX=${1}
    local ARG_TYPE=${2}
    local -A TEMP_MAP=()
    local -a REPLY=()
    local -a REPLY_VALUE=()
    local -A CLI_TYPE_TARGET=()

    source ${3-'/dev/null'}

    while read -a ARRAY; do        
        ARG_REPLY=REPLY \
        ARG_REPLY_VALUE=REPLY_VALUE \
        ARG_TEMP_MAP=TEMP_MAP \
        ARG_NAME=${ARG_PREFIX} \
        ARG_TYPE=${ARG_TYPE} \
            ::cli::core::wire::load::inline "${ARRAY[@]}"
    done

    for (( i=0; i<${#REPLY[@]}; i++ )); do
        echo -n "${REPLY[$i]-} "
        ::cli::bash::write::inline "${REPLY_VALUE[$i]-}"
    done
}

::cli::core::wire::load::inline() {
    # : ${ARG_REPLY_NAME?}
    # : ${ARG_REPLY_TYPE?}
    # : ${ARG_REPLY_KEY?}

    : ${ARG_REPLY?}
    : ${ARG_REPLY_VALUE?}
    : ${ARG_TEMP_MAP?}
    : ${ARG_NAME?}
    : ${ARG_TYPE?}

    local -n ARG_REPLY_REF=${ARG_REPLY}
    local -n ARG_REPLY_VALUE_REF=${ARG_REPLY_VALUE}

    # builtin
    if arg_type=${ARG_TYPE} ::cli::core::type::is_builtin::inline; then
        local location=( ${ARG_TYPE} )

        if [[ ${ARG_TYPE} == 'map' ]]; then
            location+=( "$1" )
            shift
        fi

        ARG_REPLY_REF+=( "${ARG_NAME} ${location[*]}" )
        ARG_REPLY_VALUE_REF+=( "${1-}" )

    elif (( $# > 0 )); then
        local -a type=( ${ARG_TYPE} )
        local next_type
        local next_name

        # anonymous
        if arg_type=${ARG_TYPE} ::cli::core::type::is_modified::inline; then
            local -n ordinal=${ARG_TEMP_MAP}
            local anonymous_type=${ARG_NAME}
            local anonymous_field=${ARG_NAME}__$1

            # update anonymous type
            local i=${ordinal[${anonymous_type}]=0}
            if [[ ! -n ${ordinal[${anonymous_field}]+set} ]]; then
                ARG_REPLY_REF+=( "${ARG_NAME} ${type[*]} ${1}" )
                ARG_REPLY_VALUE_REF+=( "${i}" )

                ordinal[${anonymous_field}]=${i}
                ordinal[${anonymous_type}]=$(( i + 1 ))
            fi

            next_name=${ARG_NAME}_${ordinal[${anonymous_field}]}
            next_type=${type[@]:1}

        # user defined
        else
            local -n TYPE_REF=CLI_TYPE_${type^^}

            if [[ ! "${TYPE_REF[$1]+set}" == 'set' ]]; then
                cli::fail "Field '$1' not found in '${ARG_TYPE}' fields: { ${!TYPE_REF[@]} }."
            fi

            ARG_REPLY_REF+=( "${ARG_NAME} ${type[*]}" )
            ARG_REPLY_VALUE_REF+=( '' )

            next_type=${TYPE_REF[$1]}
            next_name=${ARG_NAME}_${1^^}
        fi

        : ${next_name:?}
        : ${next_type:?}

        # recurse
        ARG_NAME=${next_name} \
        ARG_TYPE=${next_type} \
        ARG_TEMP_MAP=${ARG_TEMP_MAP} \
            ::cli::core::wire::load::inline "${@:2}"
    fi
}

self_test() {

    ${CLI_COMMAND[@]} -- MY_PREFIX target <(
        declare -A CLI_TYPE_TARGET=(
            [my_integer]=integer
            [my_string]=string
            [my_boolean]=boolean
            [my_map]=map
            [my_array]=array
            [my_udt]=version
            [my_map_of_map_of_version]='map_of map_of version'
            [my_empty_map]=map
            [my_empty_array]=array
        )
        declare -A CLI_TYPE_VERSION=(
            [major]=integer
            [minor]=integer
        )
        declare -p CLI_TYPE_VERSION CLI_TYPE_TARGET
    ) < <(
        echo my_string 'hello\ world'
        echo my_integer 42
        echo my_boolean true
        echo my_array element_0
        echo my_array element_1
        echo my_map key_0 value_0
        echo my_map key_1 value_1
        echo my_udt major 10
        echo my_udt minor 20
        echo my_map_of_map_of_version foo alpha major 30
        echo my_map_of_map_of_version foo alpha minor 40
        echo my_map_of_map_of_version foo beta major 50
        echo my_map_of_map_of_version moo-bar beta minor 60
    )   | sort -u 
    # \
    #     | assert::pipe_eq_exact \
    #             'MY_PREFIX target ' \
    #             'MY_PREFIX_MY_ARRAY array element_0' \
    #             'MY_PREFIX_MY_ARRAY array element_1' \
    #             'MY_PREFIX_MY_BOOLEAN boolean true' \
    #             'MY_PREFIX_MY_INTEGER integer 42' \
    #             'MY_PREFIX_MY_MAP map key_0 value_0' \
    #             'MY_PREFIX_MY_MAP map key_1 value_1' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION map_of map_of version foo 0' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION map_of map_of version moo-bar 1' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0 map_of version alpha 0' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0 map_of version beta 1' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0_0 version ' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0_0_MAJOR integer 30' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0_0_MINOR integer 40' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0_1 version ' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_0_1_MAJOR integer 50' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_1 map_of version beta 0' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_1_0 version ' \
    #             'MY_PREFIX_MY_MAP_OF_MAP_OF_VERSION_1_0_MINOR integer 60' \
    #             'MY_PREFIX_MY_STRING string hello\ world' \
    #             'MY_PREFIX_MY_UDT version ' \
    #             'MY_PREFIX_MY_UDT_MAJOR integer 10' \
    #             'MY_PREFIX_MY_UDT_MINOR integer 20'
    exit

    cli dsl sample ---load \
        | cli core wire load -- META cli_meta | sort -u \
        | cli core wire read | sort -u \
        | sort -u \
        | cli bash wire emit
}
