#!/usr/bin/env CLI_NAME=cli bash-cli
cli::import_inline cli bash emit

help() {
    cat << EOF | cli::help::sourceable | cli::help::global
Command
    ${CLI_COMMAND[@]}
    
Summary
    Define a struct.

Description
    A struct is a global an associative array whose which maps field names to types.
    
     with
    a well known name and then initializing it with an empty map. That variable is
    emitted preceeded by a comment consisting of the struct name. For example, to 
    declare a struct 'table', a map 'CLI_TYPE_TABLE' will be declared and the following
    emitted:

        # table
        declare -A CLI_TYPE_TABLE=()

Arguments
    --name -n     [Require] : Name of the type. Regex: ${CLI_REGEX_STRUCT_NAME}.
EOF
}

cli::meta::declare() {
    cli::meta::add_required name '' ${CLI_REGEX_STRUCT_NAME}
}

::cli::core::struct::define::inline() {
    : ${arg_name?}
    [[ "${arg_name}" =~ "${CLI_REGEX_STRUCT_NAME}" ]] || cli::assert 

    # name
    local -u variable=CLI_TYPE_${arg_name}
    
    # declare
    declare -gA ${variable}
    
    # initialize
    local -n ref=${variable}
    ref=()
}

main() {
    if ${arg_source}; then
        source /dev/stdin
    fi

    inline

    # emit metadata
    echo "# ${arg_name}"

    # emit
    ::cli::bash::emit::inline 'CLI_TYPE_*'
}

self_test() {
    ${CLI_COMMAND[@]} --name my_version \
        | ${CLI_COMMAND[@]} -s --name my_table \
        | cli bash emit --source -- 'CLI_TYPE_MY_*' \
        | assert::pipe_eq \
            'declare -A CLI_TYPE_MY_TABLE=()' \
            'declare -A CLI_TYPE_MY_VERSION=()'
}
