#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::import_inline cli bash variable emit

help() {
    cat << EOF | cli::help::sourceable
Command
    ${CLI_COMMAND[@]}
    
Summary
    Define a field on a type.

Description
    Adds entries to a sourced map with a well known name representing a 
    type and then emits the updated map. Assumes the first line sourced 
    is a comment containing the type name. The map name is 'CLI_TYPE_'
    plus the upper case name of the type.

    Builtin types are

        map
        array
        string
        integer
        boolean

    Valid modifiers are

        map_of

    For example, define a type 'table' with fields 'allow' and 'required' 
    like this:

        cli core type define --name table  \
            | cli core type define-field --name require --type map \
            | cli core type define-field --name allow --type "map_of map"

    which will emit this:

        # table
        declare -A CLI_TYPE_TABLE=( [allow]='map_of map' [require]=map )

Arguments
    --name -n       [Require] : Name of the field. Regex: ${CLI_REGEX_STRUCT_FIELD_NAME}.
    --type -t       [Require] : Type of the field. Regex: ${CLI_REGEX_TYPE_NAME}.
EOF
}

cli::core::struct::define_field::inline() {
    : ${arg_struct?}
    : ${arg_name?}
    : ${arg_type?}

    # add the field to type
    local -nu ref=CLI_TYPE_${arg_struct}
    ref+=( [${arg_name}]="${arg_type}" )
}

main() {
    
    # read metadata (e.g # my_type)
    read pound struct

    # source the struct
    source /dev/stdin

    # update fields associated with struct
    arg_struct=${struct} \
    arg_name=${arg_name} \
    arg_type="${arg_type}" \
        inline 

    # echo metadata
    echo ${pound} ${struct}

    # emit struct with the new field
    cli::bash::emit::inline 'CLI_TYPE_*'
}

self_test() {
    cli core struct define --name my_version  \
        | ${CLI_COMMAND[@]} --name major --type 'integer' \
        | ${CLI_COMMAND[@]} --name minor --type 'integer' \
        | cli core struct define --source --name my_table \
        | ${CLI_COMMAND[@]} --name allow --type 'map_of map' \
        | cli bash variable emit --source -- 'CLI_TYPE_MY_*' \
        | assert::pipe_eq \
            'declare -A CLI_TYPE_MY_TABLE=([allow]="map_of map" )' \
            'declare -A CLI_TYPE_MY_VERSION=([minor]="integer" [major]="integer" )'
}
