#!/usr/bin/env bash
source $(cli loader ---exports)
# WARNING: This logic used to import 'cli .group' which contains the helpers
# for manually generating metadata. As those helpers cannot be used here,
# the metadata will have to be crafted by hand. 

help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}

Summary
    Emit functions for exporting functions, variables, and import statements.
    

Global Arguments
    --help -h        [Flag] : Show this message and exit.
    --self-test      [Flag] : Runs a self test.
EOF
}

cli::meta::declare() {
    declare -gA CLI_SCOPE=([CLI_META]='cli_meta' )
    declare -gA CLI_META=(["*"]="0" )
    declare -gA CLI_META_0_ALIAS=([h]="help" )
    declare -gA CLI_META_0_ALLOW=([help]="0" [self-test]="0" )
    declare -gA CLI_META_0_ALLOW_0=([false]="" [true]="" )
    declare -gA CLI_META_0_DEFAULT=([self-test]="false" [help]="false" )
    declare -gA CLI_META_0_IMPLICIT_VALUE=([self-test]="true" [help]="true" )
    declare -gA CLI_META_0_REGEX=()
    declare -gA CLI_META_0_REQUIRE=()
    declare -g CLI_META_0_POSITIONAL="false"
}

cli::export::functions() {
    local glob

    for i in "$@"; do 
        glob+="${i}::"
    done

    while read keyword flags name; do
        if [[ "${name}" == ${glob}* ]]; then
            declare -f "${name}"
        fi
    done < <(declare -F)
}

cli::export::variable() {
    while (( $# > 0 )); do
        declare -p "$1" \
            | sed 's/^declare/declare -g/'
        shift
    done
}

cli::export::variables() {
    local -u glob

    for i in "$@"; do 
        glob+="${i}_"; 
    done

    for i in $(eval echo "\${!${glob}@}"); do
        cli::export::variable "${i}"
    done
}

cli::export::variable::merge() {
    cli::export::variable "$@" \
        | sed 's/=/+=/'
}

cli::main() {
    cli::export::variables "$@"
    cli::export::functions "$@"
}

cli::export::cli::meta::declare() {
    echo "cli::source $@"
}

cli::export::import_group() {
    local segments=( ${CLI_COMMAND[@]} )
    local length=${#segments[@]}
    local group="${segments[@]:0:$(( length - 1 ))}"
    echo "cli::source ${group} .group"
}

:;() {
    local segments=( ${CLI_COMMAND[@]} )
    local length=${#segments[@]}
    local parent_group="${segments[@]:0:$(( length - 2 ))}"
    echo "cli::source ${parent_group} .group"
}

main() {
    declare -f cli::export
    declare -f cli::export::import
    declare -f cli::export::import_group
    declare -f :;
    declare -f cli::export::variable
    declare -f cli::export::variable::merge
    declare -f cli::export::variables
    declare -f cli::export::functions
}

cli::main "$@"