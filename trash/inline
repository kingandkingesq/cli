#!/usr/bin/env bash
source $(cli loader ---exports)
cli::import_parent_group
cli::import cli-assert

help() {
    cat << EOF
Command
    cat << EOF | cli::help::global

Summary
    Emit a function whose body is the main function of a command.

Description
    Emit a function whose body is the main function of a command.
    The source file containing the fuction to be inlined is read from stdin.

Arguments
    --name   [Required] : The name of the inline function.
    --function          : The name of the function to inline. Default: inline.
EOF
    cat << EOF

Examples
    Print the main function renmaed to 'say_hi'.
        ${CLI_COMMAND[@]} --name say_hi \\
            <<< "source \\\$(cli loader); inline() { echo 'hi'; }; cli::main"
EOF
}

cli::meta::declare() {
    cli::meta::add_required 'name'
    cli::meta::add_optional 'function' 'inline'
}

inline() {
    : ${arg_name?'Unexpected lack of inline function name.'}
    : ${arg_function:='inline'}

    (
        local -a imports=()

        # disable loader
        cli() { echo '/dev/null'; }
        cli::main() { return; }
        cli::cli::meta::declare() { return; }
        cli::import_group() { return; }
        cli::import_parent_group() { return; }

        # capture imports upon which the inlined function depends
        cli::import_inline() {
            imports+=( "$*" )
        }

        # source file
        source '/dev/stdin'

        # emit dependencies
        if (( ${#imports[@]} > 0 )); then
            printf 'cli::import %s\n' "${imports[@]}"
        fi

        # emit and rename function
        declare -f ${arg_function} | { 
            read
            echo "${arg_name} ()"
            cat
        }
    )
}

self_test() {
    ${CLI_COMMAND[@]} --name say_hi \
        <<< "source \$(cli loader); inline() { echo 'hi'; }; cli::main" \
        | assert::pipe_eq_exact \
            "say_hi ()" \
            "{ " \
            "    echo 'hi'" \
            "}"
}

cli::main "$@"
