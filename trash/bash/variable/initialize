#!/usr/bin/env CLI_NAME=cli bash-cli-part
cli::source cli bash variable declare


help() {
    cat << EOF
Command
    ${CLI_COMMAND[@]}
    
Summary
    Declare a global bash variable or variables for a given type and initialize it. 

Description
    Argument \$1 is the bash type which can be either string, boolean,
    integer, map, or array. A string type variable is initialized to the
    empty string, boolean to false, integer to zero, map to an empty 
    associative array, and array to an empty array.

    Argument \$2 is the name of the global bash variable to declare and initialize.

    Subsequent positional arguments pairs of type/name can be passed and will be
    declared an initialized in turn.

Example
    ${CLI_COMMAND[@]} -- map VAR
EOF
}

cli::bash::variable::initialize::main() {
    cli::bash::variable::initialize "$@"

    while (( $# > 0 )); do
        shift
        declare -p $1
        shift
    done
}

cli::bash::variable::initialize() {
    cli::bash::variable::declare "$@"

    while (( $# > 0 )); do

        local type=$1
        shift

        local name=$1
        shift

        local -n ref=${name}
        case ${type} in
            'integer') ref=0 ;;
            'array') ;&
            'map') ref=() ;;
            'string') ref='' ;;
            *) cli::assert "Unknown bash type '${type}'."
        esac
    done
}

self_test() {
    diff <(${CLI_COMMAND[@]} -- string VAR) - <<< 'declare -- VAR=""' || cli::assert
    diff <(${CLI_COMMAND[@]} -- integer VAR) - <<< 'declare -i VAR="0"' || cli::assert
    diff <(${CLI_COMMAND[@]} -- array VAR) - <<< 'declare -a VAR=()' || cli::assert
    diff <(${CLI_COMMAND[@]} -- map VAR) - <<< 'declare -A VAR=()' || cli::assert
    diff <(${CLI_COMMAND[@]} -- \
        string MY_STRING \
        map MY_MAP \
    ) - <<-EOF || cli::assert
		declare -- MY_STRING=""
		declare -A MY_MAP=()
		EOF
}